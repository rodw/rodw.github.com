< Monday, 8 December 2003 >

An SQL Annoyance <sup><a href="http://radio.weblogs.com/0122027/2003/12/08.html#a103" title="item permalink">#</a></sup>


  <p>SQL isn't consistent under row/column transposition.  For example:</p>
<pre>select 3 + NULL</pre>
<p>yields NULL.  Yet,</p>
<pre>create table TEMP ( NUM number );
insert into TEMP values ( 3 );
insert into TEMP values ( NULL );
select sum(NUM) from TEMP</pre>
<p>yields 3 (since NULL valued rows are ignored by aggregate functions).</p>
<p>This inconsistency is all the more annoying since both:</p>
<pre>select sum(NUM) from TEMP where NUM is not NULL</pre>
<p>and</p>
<pre>select sum(coalesce(NUM,0)) from TEMP</pre>
<p>would yield the same result under an "aggregation of NULL is NULL" rule. Yet under the "aggregation function ignores NULL" rule, creating a <i>single</i>, efficient, cross-database query the yields NULL if there's a NULL row and the SUM otherwise is awkward at best.</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/12/08.html#a103" title="item permalink">posted&nbsp;7:27:27 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=103&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F12%2F08.html%23a103" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (103)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=103&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F12%2F08.html%23a103">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=103&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F12%2F08.html%23a103" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (103)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=103&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F12%2F08.html%23a103">(link)</a>
</div>
  <p></p>


< Friday, 21 November 2003 >

Ruby Userland <sup><a href="http://radio.weblogs.com/0122027/2003/11/21.html#a102" title="item permalink">#</a></sup>


  <p>
As I <a href="http://radio.weblogs.com/0122027/2003/11/04.html#a95" title="Custom Radio UserLand Clients?">previously mentioned</a>, I've been toying with custom clients to the <a href="http://www.soapware.org/xmlStorageSystem">XmlStorageSystem</a> XML-RPC protocol used by <a href="http://radio.userland.com/">Radio Userland</a> and <a href="http://www.myelin.co.nz/wcswiki/w/CommunityServerWiki">several open source blog servers</a>, with the ultimate goal of hosting a custom blog on the radio.weblogs.com host.
</p><p>
Over the past couple of evenings I've hacked out <a href="http://radio.weblogs.com/0122027/files/xmlStorageSystem.rb.txt" title="xmlStorageSystem.rb">xmlStorageSystem.rb</a>, a reasonably functional Ruby-based client to the XmlStorageSystem system protocol.  It works like this:
</p>
<p>
To create a new instance of the client, use:
</p>
<pre>XmlStorageSystem.new(<i>&lt;usernumber&gt;</i>,<i>&lt;md5-hash-of-password&gt;</i>,<i>&lt;root-directory&gt;</i>)</pre>
<p>
For instance, I use:
</p>
<pre>XmlStorageSystem.new('122027','8c8034f5c9d68564e155c67a6d4e4612','/0122027/')</pre>
<p>
although that's not my actual password.
</p>
<p>
Actually, my local copy of xmlStorageSystem.rb has these value specified as the defaults, so I just user XmlStorageSystem.new, and I'll use that form in the rest of these examples.  The constructor also accepts an number of arguments that should allow one to connect to the <a href="http://www.pycs.net/">Python Community Server</a> and others, although Radio is the only server I've tried.
</p>
<p>
To get a listing of the files currently stored on the server, use:
</p>
<pre>XmlStorageSystem.new.getMyDirectory</pre>
<p>
To download all those files to a local directory
</p>
<pre>XmlStorageSystem.new.backupMyDirectory 'backupdir'</pre>
<p>
To upload a file (or files) to the server, use:
</p>
<pre>XmlStorageSystem.new.saveMultipleFiles( 'local-base-dir', [ 'file1', 'file2', 'etc' ])</pre>
<p>
To delete a file (or files)  from the server, use:
</p>
<pre>XmlStorageSystem.new.deleteMultipleFiles( [ 'file1', 'file2', 'etc' ])</pre>
<p>
Finally, the really handy one:
</p>
<pre>XmlStorageSystem.new.updateFromLocalDirectory 'localdir'</pre>
<p>
Which will compare the list of files in the local directory with those on the server, delete the ones that don't appear locally, and load/update the rest.
</p><p>
Since this is Ruby, it's easy to set up little shell scripts that invoke those commands in ways useful to your personal work style.
</p><p>
If one wanted to be clever, there is metadata available via XmlStorageSystem.getMyDirectory that would allow one to determine whether or not a file has changed since it was last uploaded, but I haven't gotten around to that yet.
</p><p>
I'm still pretty much a Ruby neophyte, so there's probably substantial room for improvement there.  In particular, (1) there's no error handling present just yet and (2) the current implementation supports hackablity (changing the script itself) more than extensibility.  Nevertheless, it's neat that a Ruby neophyte can write a basic XmlStorageSystem client in 150 lines of readable code.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/21.html#a102" title="item permalink">posted&nbsp;12:58:26 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=102&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F21.html%23a102" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (102)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=102&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F21.html%23a102">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=102&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F21.html%23a102" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (102)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=102&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F21.html%23a102">(link)</a>
</div>
  <p></p>


< Wednesday, 19 November 2003 >

some bookmarks <sup><a href="http://radio.weblogs.com/0122027/2003/11/19.html#a101" title="item permalink">#</a></sup>


  <ul>
<li>Laurent Bossavit: <a href="http://bossavit.com/thoughts/archives/000168.html">From blog to print</a></li>
<li><a href="http://pleac.sourceforge.net/">PLEAC</a>, the Programming Language Examples Alike Cookbook, translates the <a href="http://www.oreilly.com/catalog/cookbook">Perl Cookbook</a> into a variety of programming langugaes.</li>
<li>Jeremy Zawodny:  <a href="http://jeremy.zawodny.com/blog/archives/001075.html">CVS Commit + Weblog = Changeblog</a></li>
</ul>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/19.html#a101" title="item permalink">posted&nbsp;11:14:23 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=101&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F19.html%23a101" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (101)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=101&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F19.html%23a101">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=101&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F19.html%23a101" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (101)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=101&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F19.html%23a101">(link)</a>
</div>
  <p></p>


< Monday, 17 November 2003 >

What's this sticky green fluid? <sup><a href="http://radio.weblogs.com/0122027/2003/11/17.html#a100" title="item permalink">#</a></sup>


  <p>
Oh, I see, I've been <a href="http://www.jroller.com/page/fate/?anchor=commons_primitives_is_vile_and">biled</a>.
</p><p>
While I think Hani understands <a href="http://jakarta.apache.org/commons/primitives/" title="Apache Jakarta Commons Primitives">commons-primitives</a> better than he lets on, I'm not sure the same is true of the peanut gallery that regularly fill up his comment threads.  Since Hani was nice enough to address me as "dear", I guess I'll go ahead and feed the trolls.
</p><p>
Hani's rants are most amusing when there's some content beyond vulgarity and <i>argumentum ad hominem</i>.  This post is thinner on that point than many, but let's see if we can find some actual, specific complaints to consider.
</p><p>
First, there's one point on which Hani and I are in agreement:
</p>
<blockquote>[F]or most applications, the performance gain is so trivial and insignificant that it really isn't worth the extra jar and complexity of using non-standard collection classes.</blockquote>
<p>
Agreed.  Moreover, the space savings (which in the case of an ArrayList varies from 50% to 94%, depending upon the primitive type being used) is also "trivial and insignificant" in light of the size and number of collections of primitives used by most applications.
</p><p>
So there you go.  Commons-primitives isn't universally applicable.  A damning critique indeed.
</p><p>
The rest of the post is less insightful.
</p><p>
Hani writes:
</p>
<blockquote>How on earth could they have missed that age old adage, 'premature optimisation is the root of all evil'?</blockquote>
<p>
Is this meant to suggest that commons-primitives was developed before there was a demonstrated need for it?  Hani, your omniscience has failed you, as a bit of research would have revealed.
</p><p>
Commons-primitives was initially developed in support of the <a href="http://axion.tigris.org/" title="Axion: Open Source Java Database">Axion database</a> project.  In Axion, we have need to store a significant number of collections of primitives, and at times those collections grow rather large.  Consider, for instance, a table with an integer-valued key field.  In Axion, depending upon the index type and configuration, there may be three primitive values lists created for this table--a list of positive long values representing file offsets by row identifier and a pair of lists of integers, one containing key values and the other the associated row identifier.  As initially developed using the java.util collections, this setup used 48 bytes per row in memory.   The current, commons-primitives based implementation uses only 12 bytes per row in memory, saving 75% of the space.  In my mind, increasing the number of rows that can be efficiently accessed by a factor of 4 (and getting a little performance boost to boot) is neither a "trivial" nor "insignificant" improvement.
</p><p>
Alternatively, perhaps this comment is meant to suggest that some <em>clients</em> might use commons-primitives without a demonstrated need for trying to reduce the size of their collections of primitives.  I'm not sure how this reflects upon commons-primitives itself.  As above, commons-primitives isn't universally applicable.   Perhaps optimistically, I'll continue working from the assumption that most folks have the critical analysis skills necessary to determine if a given library is applicable to their particular situation.
</p><p>
Hani's final group of complaints are concerned with object naming.  He writes:
</p>
<blockquote>Now maybe I'm old fashioned, but in my crazy world [List]Iterator is a [...] lot easier to work with [than] DoubleListIteratorListIterator.</blockquote>
<p>
Really?  That's odd, given that they have literally the same interface.  Perhaps this is meant to suggest that the name is verbose?  Sure, I'll concede that.  But it's also the conventional name, and a type that's rarely used.  Allow me to break it down for you.  &lt;Type&gt;ListIteratorListIterator is an adapter which makes a &lt;Type&gt;ListIterator look like a ListIterator.  That's why you find it in the <tt>adapter</tt> package.  That's why it follows the naming convention used by other Java adapters, like ByteArrayInputStream, StringReader and OutputStreamWriter.  That's also while you'll use it maybe a handful of times in a complete application.
</p><p>
Hani continues:
</p>
<blockquote>If your brain hasn't automatically shut down by now to protect itself from these vile names, then contemplate RandomAccessDoubleList.RandomAccessDoubleListIterator if you will.</blockquote>
<p>
Ah, yes. A protected-scope, inner class of an abstract base class goes right to the heart of the component's usability.  I think if you poke around a bit, you might be able to find an oddly named private variable as well.
</p><p>
Meanwhile, for the methods one actually uses on a regular basis, such as List.add or Iterator.next, the primitive collections allow a more concise, readable, implementation.  Consider, for example, taking the pairwise sum of two lists.  Here's an Object-based implementation:
</p>
<pre>List pairwiseSum(List lista, List listb) {
  List result = new ArrayList();
  for(Iterator a = lista.iterator(), b = listb.iterator(); a.hasNext(); ) {
    <b>result.add(
      new Integer(
        ((Integer)(a.next())).intValue() +
        ((Integer)(b.next())).intValue() ) );</b>
  }
  return result;
}</pre>
<p>
Here's a primitive version:
</p>
<pre>IntList pairwiseSum(IntList lista, IntList listb) {
  IntList result = new ArrayIntList();
  for(IntIterator a = lista.iterator(), b = listb.iterator(); a.hasNext(); ) {
    <b>result.add( a.next() + b.next() );</b>
  }
  return result;
}</pre>
<p>
Hani, I enjoy your rants as much as the next geek, but if the best you can do is troll the <a href="mailto:annoucements@jakarta">annoucements@jakarta</a> list to wait for a chance to say "but there are times when that library isn't helpful" (which, so far, has seems to be the point of every jakarta-commons rant you've posted to date), I may find another use for that slot in my aggregator.  Also, I've noticed an increase in the number of logical fallacies in your rants.  Being a jerk for dramatic effect might be entertaining, but being a misleading jerk is not.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/17.html#a100" title="item permalink">posted&nbsp;11:53:36 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=100&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F17.html%23a100" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (100)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=100&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F17.html%23a100">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=100&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F17.html%23a100" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (100)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=100&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F17.html%23a100">(link)</a>
</div>
  <p></p>


< Friday, 14 November 2003 >

On Programming Idioms <sup><a href="http://radio.weblogs.com/0122027/2003/11/14.html#a99" title="item permalink">#</a></sup>


  <p>
Two things I'm always keen to learn when picking up a new programming language are:
</p>
<ol>
<li>How does one organize large projects?  In other words, how does one partition responsibilities and types across namespaces, modules and files?</li>
<li>What are the common idioms in the language?</li>
</ol>
<p>
I've been doing some string processing work with Ruby recently, and it's got me thinking about examples of the latter.
</p><p>
For example, in Java, the String class doesn't have a direct, boolean-valued method that will tell you whether or not a String contains another String, i.e., there's nothing like:
</p>
<pre>if(someString.contains(anotherString)) { ... }</pre>
<p>
Instead, most Java developers will write:
</p>
<pre>if(someString.indexOf(anotherString) != -1) { ... }</pre>
<p>
where String.indexOf(String) returns the index of the first occurrence of the argument String, or -1 if the given String isn't found.  Most Java developers will immediately recognize that as the "String.contains" idiom, and won't miss a beat.
</p><p>
This idiom is so strong in the Java community that it's almost counter-productive to write a custom utility method:
</p>
<pre>public class StringUtils {
  public static boolean contains(String a, String b) {
    return (a.indexOf(b) != -1);
  }
}</pre>
<p>
since many developers who see
</p>
<pre>if(StringUtils.contains(someString,anotherString)) { ... }</pre>
<p>
are likely to wonder whether the StringUtils.contains method really does what it is implied--Is this equivalent to the String.indexOf idiom?  Is that someString.contains(anotherString) or vice versa? How are null's handled? etc.  Unless the developer is already comfortable and familiar with the StringUtils class being used, this code is probably less readable to an experienced developer than the "indexOf != -1" formulation.
</p><p>
(This is not to say that "String.indexOf(x) != -1" is actually preferable to "String.contains(x)", but rather that in the absence of String.contains, the idiom is more widely recognized than a custom utility method.  Why Sun can't at some point introduce a String.contains method, say in JDK 1.5,  isn't entirely clear to me.)
</p><p>
Now, in the Ruby scripting I've been doing recently, I keep needing to determine whether a String begins with a given prefix.  In Java, that's the String.startsWith method, of course.  The Ruby String class does not have a startsWith method, but one of the neat things about Ruby is that it's possible to literally add such a method the the String class, as follows:
</p>
<pre>class String
  def startsWith str
    return self[0...str.length] == str
  end
end</pre>
<p>
after which everything behaves exactly like the built-in String class contained that definition.  For example, one can then write:
</p>
<pre>if someString.startsWith(anotherString) ...</pre>
<p>
or even
</p>
<pre>if "a literal string".startsWith(anotherString) ...</pre>
<p>
etc.
</p><p>
Of course, the implementation I used for String.startsWith (<code>self[0...str.length] == str</code>) is just one of several possible implementations.  Regular expressions provide one way of implementing such a check.  The Java-like indexOf function provides another (e.g., <code>self.indexOf(str) == 0</code>).
</p><p>
Since there is no built-in String.startsWith (or for that matter String.contains) in Ruby, I wonder if there is some common idiom that experienced Ruby developers find more readable than adding a custom method to String?  If not for String.startsWith, how about String.contains?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/14.html#a99" title="item permalink">posted&nbsp;11:36:09 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=99&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F14.html%23a99" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (99)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=99&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F14.html%23a99">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=99&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F14.html%23a99" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (99)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=99&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F14.html%23a99">(link)</a>
</div>
  <p></p>


< Tuesday, 11 November 2003 >

The impotence of functional programming (by Sjoerd Visscher) <sup><a href="http://radio.weblogs.com/0122027/2003/11/11.html#a98" title="item permalink">#</a></sup>


  <p>
Sjoerd Visscher <a href="http://w3future.com/weblog/2003/11/11.xml#theImpotenceOfFunctionalProgramming" title="11 November 2003: The impotence of functional programming">writes</a>:
</p>
<blockquote>"Take for example the function zip (or zip3, zip4, exponential ugh-ness), a very popular function in f.e. Haskell. Firstly, if you have two lists, with values that go pairwise together, those values shouldn't have been apart in the first place. Secondly, what you end up with is a list of tuples. Values in a tuple always have more context than just being together. All this information is lost."</blockquote>
<p>
[Via <a href="http://w3future.com/weblog" title="w3future.com">Sjoerd Visscher's weblog</a>]
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/11.html#a98" title="item permalink">posted&nbsp;7:12:06 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=98&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F11.html%23a98" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (98)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=98&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F11.html%23a98">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=98&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F11.html%23a98" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (98)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=98&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F11.html%23a98">(link)</a>
</div>
  <p></p>


< Thursday, 6 November 2003 >

Apache Jakarta Commons Primitives 1.0 Released <sup><a href="http://radio.weblogs.com/0122027/2003/11/06.html#a97" title="item permalink">#</a></sup>


  <p>
I've blogged a bit about the <a href="http://jakarta.apache.org/commons/primitives/" title="Apache Jakarta Commons Primitives">Primitives Component</a>
in <a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="Tuesday, 15 April 2003: I/O Iterators for Java">the</a> <a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="Monday, 7 April 2003: Rod's Open Source To Do List">past</a>, and I'm happy to note that <a href="http://article.gmane.org/gmane.comp.jakarta.commons.devel/34432" title="[ANN] Jakarta Commons Primitives 1.0 Released">commons-primitives now has an official 1.0 release</a>
(<a href="http://jakarta.apache.org/site/binindex.cgi#commons-primitives" title="links to download primitives from a mirror">binaries</a>) (<a href="http://jakarta.apache.org/site/sourceindex.cgi#commons-primitives" title="links to download primitives from a mirror">source</a>).
</p><p>
Currently Primitives provides Java-primitive based versions of various Collection interfaces, which is substantially smaller and faster than working with the Object-wrapper equivalents.  For instance, an ArrayShortList requires 1/10th the space of an ArrayList of Shorts, and an ArrayLongList requires 2/5ths the space of an ArrayList of Longs.  There's a substantial time savings as well, in that one isn't constantly "boxing" and "unboxing" the primitives and their Object equivalents when moving them in and out of the Collection.  There are readability and <a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="Tuesday, 15 April 2003: I/O Iterators for Java">other</a> advantages as well.
</p><p>
(And, no, as I understand it, neither the auto-boxing nor the generics features of JDK 1.5 will obviate the need for this library.  You could use auto-boxing to emulate the syntax of list.add(int), but the internal representation will still be Object based.)
</p><p>
We use the primitive collections fairly extensively within the <a href="http://axion.tigris.org/" title="Axion Java Database Engine">Axion database</a> project for things like indices and lists of row identifiers or data file offsets, indeed the code was originally developed there.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/06.html#a97" title="item permalink">posted&nbsp;11:08:37 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=97&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F06.html%23a97" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (97)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=97&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F06.html%23a97">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=97&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F06.html%23a97" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (97)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=97&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F06.html%23a97">(link)</a>
</div>
  <p></p>


< Wednesday, 5 November 2003 >

Beyond Blogging (by Elizabeth Lane Lawley) <sup><a href="http://radio.weblogs.com/0122027/2003/11/05.html#a96" title="item permalink">#</a></sup>


  <p>
<a href="http://www.it.rit.edu/~ell/il03-bb/index.php">Beyond Blogging</a> by Elizabeth Lane Lawley is, as Sam writes, "an excellent look at the entire ecosystem of blogging".
</p><p>
[Via <a href="http://www.intertwingly.net/blog/1635.html">Sam Ruby</a>]
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/05.html#a96" title="item permalink">posted&nbsp;12:05:57 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=96&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F05.html%23a96" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (96)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=96&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F05.html%23a96">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=96&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F05.html%23a96" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (96)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=96&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F05.html%23a96">(link)</a>
</div>
  <p></p>


< Tuesday, 4 November 2003 >

Custom Radio UserLand Clients? <sup><a href="http://radio.weblogs.com/0122027/2003/11/04.html#a95" title="item permalink">#</a></sup>


  <p>
<a href="http://radio.userland.com/" title="Radio UserLand">Radio</a> is a reasonably nifty weblog client,
sporting an easy-to-use, web-based content management tool, a workable server-based news aggregator and a
fairly robust weblog hosting infrastructure for USD$3.33 a month.
</p><p>
Things I find annoying about Radio include the fact that it won't run on a Unix-based OS (although there
are <a href="http://radio.weblogs.com/0102385/2003/04/24.html" title="Chris Double's Radio Weblog">reports</a>
of folks who've got the Windows version up and running under Wine on Linux), it's got a fairly large footprint, and
it uses a relatively cumbersome and under-documented scripting framework.
</p><p>
All in all, the biggest appeal of Radio Userland to me is that I can get quick, easy and generally adequate weblog
hosting for monthly cost less than a trip to Starbucks.  If only I could continue to use the hosting service and
replace the Windows-based client--I'd be happy to generate the weblog HTML via some homegrown software and simply
upload the content via FTP or SCP.
</p><p>
Well, it's not quite as easy as FTP, but after poking around a bit, I've figured out how to "manually" update a
Radio hosted site, or more generally,
<a href="http://www.myelin.co.nz/wcswiki/w/CommunityServerWiki" title="Community Server Wiki">any of a number of servers</a>
that supports the
<a href="http://www.soapware.org/xmlStorageSystem" title="SoapWare.org: xmlStorageSystem">xmlStorageSystem</a> XML-RPC protocol.
</p><p>
Here's a relatively crude but functional example using <a href="http://jakarta.apache.org/commons/httpclient">HttpClient</a>.
</p><p>
First, the basic framework for processing a request and it's response.  This method takes a request "body" and returns the response.  Typically both the request and the response will be XML-RPC documents.
</p><pre>String processRequest(String body) throws IOException, HttpException {
    PostMethod method = new PostMethod();
    method.setRequestHeader("Content-type","text/xml");
    method.setRequestBody(body);
    method.setPath("/RPC2");
    method.setRequestContentLength(body.length());
&nbsp;
    HttpClient client = new HttpClient();
&nbsp;
    HostConfiguration host = new HostConfiguration();
    host.setHost("radio.xmlstoragesystem.com");
&nbsp;
    client.executeMethod(host,method);
&nbsp;
    return method.getResponseBodyAsString();
}</pre>
<p>
Typically we pass an xmlStorageSystem request to this method as the String parameter.  Here's one simple example, a sort of
"status" query:
</p>
<pre>&lt;?xml version="1.0"?&gt;
&lt;methodCall&gt;
  &lt;methodName&gt;xmlStorageSystem.getServerCapabilities&lt;/methodName&gt;
  &lt;params&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- your radio user number, e.g., mine is "122027" --&gt;&lt;/value&gt;&lt;/param&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- the md5 hash of your radio password as ASCII bytes --&gt;&lt;/value&gt;&lt;/param&gt;
  &lt;/params&gt;
&lt;/methodCall&gt;</pre>
<p>
To create or update a file (or files), we use <code>saveMultipleFiles</code>, for example:
</p>
<pre>&lt;?xml version="1.0"?&gt;
&lt;methodCall&gt;
  &lt;methodName&gt;xmlStorageSystem.saveMultipleFiles&lt;/methodName&gt;
  &lt;params&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- your radio user number, e.g., mine is "122027" --&gt;&lt;/value&gt;&lt;/param&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- the md5 hash of your radio password as ASCII bytes --&gt;&lt;/value&gt;&lt;/param&gt;
    &lt;param&gt;
      &lt;value&gt;
        &lt;array&gt;
          &lt;data&gt;&lt;value&gt;/rpctest/test.html&lt;/value&gt;&lt;/data&gt; &lt;!-- location of file --&gt;
        &lt;/array&gt;
      &lt;/value&gt;
    &lt;/param&gt;
    &lt;param&gt;
      &lt;value&gt;
        &lt;array&gt;
          &lt;data&gt;&lt;value&gt;Hello World!&lt;/value&gt;&lt;/data&gt; &lt;!-- contents of file --&gt;
        &lt;/array&gt;
      &lt;/value&gt;
    &lt;/param&gt;
  &lt;/params&gt;
&lt;/methodCall&gt;</pre>
<p>
To delete a file (or files), we use <code>deleteMultipleFiles</code>, for example:
</p>
<pre>&lt;?xml version="1.0"?&gt;
&lt;methodCall&gt;
  &lt;methodName&gt;xmlStorageSystem.saveMultipleFiles&lt;/methodName&gt;
  &lt;params&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- your radio user number, e.g., mine is "122027" --&gt;&lt;/value&gt;&lt;/param&gt;
    &lt;param&gt;&lt;value&gt;&lt;!-- the md5 hash of your radio password as ASCII bytes --&gt;&lt;/value&gt;&lt;/param&gt;
    &lt;param&gt;
      &lt;value&gt;
        &lt;array&gt;
          &lt;data&gt;&lt;value&gt;/rpctest/test.html&lt;/value&gt;&lt;/data&gt; &lt;!-- location of file --&gt;
        &lt;/array&gt;
      &lt;/value&gt;
    &lt;/param&gt;
  &lt;/params&gt;
&lt;/methodCall&gt;</pre>
<p>
etc.
</p><p>
See <a href="http://www.soapware.org/xmlStorageSystem" title="SoapWare.org: xmlStorageSystem">Dave Winer's writeup</a> for more
procedures, details and <a href="http://www.soapware.org/stories/storyReader$16">examples</a>.
</p><p>
Now that I know how to manipulate my radio.weblogs.com site without using the Radio client, I'm tempted to roll my own weblogging software, if only so I don't have to keep a Windows box around to support my blog.  As I mentioned above, there are <a href="http://www.myelin.co.nz/wcswiki/w/CommunityServerWiki" title="Community Server Wiki">a number of servers</a> that support the xmlStorageSystem protocol.  Anyone know of any non-Radio clients for xmlStorageSystem?  At minimum, something that syncs an arbitrary local directory with a remove xmlStorageSystem server should be easy enough to implement, which would allow anything that you can "publish" locally to be used as a client to a Community Server implementation.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/11/04.html#a95" title="item permalink">posted&nbsp;3:24:32 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=95&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F04.html%23a95" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (95)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=95&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F04.html%23a95">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=95&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F04.html%23a95" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (95)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=95&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F11%2F04.html%23a95">(link)</a>
</div>
  <p></p>


< Thursday, 30 October 2003 >

The Jakarta Commons Problem in a Nutshell <sup><a href="http://radio.weblogs.com/0122027/2003/10/30.html#a94" title="item permalink">#</a></sup>


  <a href="http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-dev@jakarta.apache.org&amp;msgNo=37216">Exhibit A</a>,
<a href="http://nagoya.apache.org/eyebrowse/ReadMsg?listName=commons-dev@jakarta.apache.org&amp;msgNo=37218">Exhibit B</a>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/10/30.html#a94" title="item permalink">posted&nbsp;9:26:23 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=94&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F30.html%23a94" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (94)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=94&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F30.html%23a94">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=94&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F30.html%23a94" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (94)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=94&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F30.html%23a94">(link)</a>
</div>
  <p></p>


< Wednesday, 29 October 2003 >

The Selfish Class <sup><a href="http://radio.weblogs.com/0122027/2003/10/29.html#a93" title="item permalink">#</a></sup>


  <p>
Foote and Yoder's <cite><a title="The Selfish Class" href="http://www.laputan.org/selfish/selfish.html">The Selfish Class</a></cite> provides a pattern language for software artifacts that survive.
</p>
<p>
[Via <a href="http://www.sauria.com/blog/2003/10/28#649">Ted Leung</a>]</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/10/29.html#a93" title="item permalink">posted&nbsp;4:08:02 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=93&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F29.html%23a93" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (93)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=93&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F29.html%23a93">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=93&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F29.html%23a93" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (93)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=93&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F29.html%23a93">(link)</a>
</div>
  <p></p>


< Wednesday, 22 October 2003 >

Wiki + Blog = PIM <sup><a href="http://radio.weblogs.com/0122027/2003/10/22.html#a92" title="item permalink">#</a></sup>


  <p>
I'm one of those people who's so obsessed with organization that he's poorly organized.  I'm constantly trying out new ways to manage the notes I scribble on various physical and electronic media, so much so that the frequency of change leads to greater disorganization.
</p><p>
I've tried a number of "information management" tools, including index cards, sticky notes, notebooks, a Franklin planner, Microsoft Outlook, and various outlining, mind-mapping and PIM programs, and found them all wanting in one way or another (maybe it's me).  Paper based systems were too hard to search and too static in their organization.  Lacking a PDA, electronic systems weren't portable enough.  No matter what the system, I'd always spend more time trying to set up organizational categories than I ever saved by using them. In fact I had pretty much broken the habit, falling back to a collection of loosely organized text files that I could easily scp to and from whatever workstation I was currently using.
</p><p>
About a year ago, I got a Sharp Zaurus, and since that addresses one of my recurring PIM complaints--having something that's always readily available, my hopes for finding the perfect PIM system were renewed.  I've played around with a number of the PIM systems available.  Using the bundled Address Book/Calendar/To Do List/Email Client was too jumbled.  The "outliner" <a href="http://iqnotes.kybu.sk/?page=index">IQNotes</a> was promising, but a single hierarchy is inflexible and using it to create dated journal entries requires too much manual effort.  In the end, I came back to a loosely organized collection of text files, this time stored on the Zaurus.
</p><p>
Back in my <a href="http://radio.weblogs.com/0122027/2003/03/28.html#a3" title="28 March 2003: First Post">first post</a>, I mentioned that one of the reasons I was interested in blogging is that I had become interested in journaling in general.  These two concepts--the search for the perfect organizational system and interest in journaling--interrelate.
</p><p>
As I'm sure I'm not the first to suggest, it seems that the ideal PIM system presents at least two perspectives on the information to be managed:
</p><p>
1) A time based view, answering such questions as "what have I been working with recently?" or "what else was I working on around that time?"
</p><p>
2) A "concept network" view, answering such questions as "what's related to this topic?" or "what else do I know about this subject?"
</p><p>
Clearly, I presume, blog-like software is an excellent starting point for the former, and wiki-like software is an excellent starting point for the former.  Fortunately, a number of projects have begun to explore combinations of the two, either by implementing a blog-as-wiki (like <a href="http://snipsnap.org/" title="snipsnap.org">SnipSnap</a> does) or by adding blogging features to a wiki engine (like <a href="http://www.jspwiki.org/" title="jspwiki.org">JspWiki</a> and no doubt others do).
</p><p>
Having a fair amount of Java experience (indeed, I've built a little wiki or two in Java), my first thought was to get a Java based wiki up and running on my Zaurus.  JspWiki looks nice, and like most Java-based wikis is Servlet/JSP based, so I endeavored to get a WAR-friendly Java Servlet engine up and running on my Zaurus.  Having tried both Tomcat and Jetty under both the <a href="http://www.esmertec.com/products/products_jeode.shtm" title="Jeode Java Runtime Environment">Jeode evm</a> and <a href="http://developer.java.sun.com/developer/earlyAccess/pp4zaurus/" title="J2ME Personal Profile for Zaurus">Personal Java cvm</a>, I came close, but fundamentally failed to do this.  (I note that my SL-5500 had just barely enough disk space or memory to do this as well.)
</p><p>
I briefly considered setting up a stand-alone (i.e., non-Servlet/JSP) Java wiki engine on the Zaurus, but without a moderate amount of development that seems like an awkward environment for templating and modification, and non-servlet Java web development feels like dead-end development. (Its only a matter of time before a reasonably micro servlet engine is available.)  That's when I stumbled across <a href="http://c2.com/cgi/wiki?PhlIp" title="Ward's Wiki: PhlIp">PhlIp</a>'s <a href="http://www.xpsd.com/MiniRubyWiki" title="XpSD Wiki: Mini Ruby Wiki">Mini Ruby Wiki</a>, which implements a featureful, stand-alone wiki server in around 1000 lines of Ruby code.
</p><p>
(For the record, one could readily build a similarly featured wiki in Java, and probably a number of languages, in roughly the same number of lines, it might not be as much fun.)
</p><p>
It still took me a while to get a Ruby interpreter up and running on the Zaurus (after trying a few different builds, I finally got the one from <a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/46111" title="Re: Ruby on the Sharp Zaurus PDA">Vincent Fiack</a> working), but the resulting binaries are smaller in terms of disk and memory footprint than the JVMs I was playing with.  Perhaps more importantly, as a purely interpreted language, the engine itself is easier to tweak.  And this gives me a reasonably good excuse to hack out some Ruby code.  I've already added/modified a few minor features, adding some simple blog-like features to the calendar features that already existed.  If I come up with something I'm not to embarrassed to share, I'll post it here or submit it to PhlIp's <a href="http://rubyforge.org/projects/minirubywiki" title="RubyForge: Project Info: MiniRubyWiki">RubyForge</a> project.
</p><p>
My only problem now is resisting the temptation to continually tweak the wiki engine code.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/10/22.html#a92" title="item permalink">posted&nbsp;9:40:46 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=92&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F22.html%23a92" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (92)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=92&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F22.html%23a92">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=92&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F22.html%23a92" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (92)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=92&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F22.html%23a92">(link)</a>
</div>
  <p></p>


< Friday, 17 October 2003 >

A Timely Bug <sup><a href="http://radio.weblogs.com/0122027/2003/10/17.html#a91" title="item permalink">#</a></sup>


  <p>
I'm a sucker for quirky bugs.  Recently, I've been hacking around with <a href="http://c2.com/cgi/wiki?PhlIp" title="Ward's Wiki: PhlIp">PhlIp</a>'s excellent <a href="http://www.xpsd.com/MiniRubyWiki" title="XpSD Wiki: Mini Ruby Wiki">Mini Ruby Wiki</a> (more on that later), and discovered one such bug.
</p><p>
There's a block of code in MiniRubyWiki that renders a small calendar in HTML, not unlike your typical blog calendar widget.  Here's a small subset (the actual code is more interesting that this) which is largely although not completely unchanged from the original miniWiki.rb source.  See if you can spot the bug.
</p><pre>
  # here's a constant, declared elsewhere in the program
  SecondsInDay = 60 * 60 * 24
&nbsp;
  # ...
&nbsp;
  # In this loop we're rendering a four-week calendar,
  # from the beginning of last week until the end of the week after next.
  # "beginningOfLastWeek" is a Time indicating the Sunday of last week
&nbsp;
  today = Time.now()
  (0...28).each do |day|
    dayOnCalendar = beginningOfLastWeek + day * SecondsInDay
    # break the row every seven days
    calendar += '&lt;/tr&gt;&lt;tr&gt;' if day.divmod(7)[1] == 0
    calendar += '&lt;td'
    # highlight today
    if today.mday() == dayOnCalendar.mday() then
      calendar += ' bgcolor="#88ff88"'
    end
    calendar += '&gt;'
    # show the month for the first day in the calendar or in the month
    calendar += dayOnCalendar.strftime('%b') + ' ' if dayOnCalendar.mday == 1 or day == 0
    calendar += dayOnCalendar.mday.to_s()
&nbsp;
    # ...snip some stuff displayed within the calendar...
&nbsp;
    calendar += '&lt;/tr&gt;'
  end
</pre>
<p>&nbsp;</p>
<p>
I've been running this code on my Zaurus, sometimes launching it from the EmbeddedKonsole on the Zaurus itself, and sometimes from an ssh terminal running on a remote machine.  Eventually I noticed something funky about this.  When I launch the server from the ssh terminal, 1 November 2003 is listed, correctly, as a Saturday.  When I launch the server from a terminal on the Zaurus itself, 1 November isn't listed at all (the last day on the calendar is 31 October 2003, listed, incorrectly, as a Saturday).  In fact, when I launch the server from the Zaurus, Sunday, 26 October 2003 is listed twice.
</p><p>
Adding a "puts curDay.to_s" line inside that loop makes the problem obvious.  This output like the following:
</p>
<pre>Sun Oct 19 00:00:00 CDT 2003
Mon Oct 20 00:00:00 CDT 2003
Tue Oct 21 00:00:00 CDT 2003
Wed Oct 22 00:00:00 CDT 2003
Thu Oct 23 00:00:00 CDT 2003
Fri Oct 24 00:00:00 CDT 2003
Sat Oct 25 00:00:00 CDT 2003
Sun Oct 26 00:00:00 CDT 2003
Sun Oct 26 23:00:00 CST 2003
Mon Oct 27 23:00:00 CST 2003
Tue Oct 28 23:00:00 CST 2003
Wed Oct 29 23:00:00 CST 2003
Thu Oct 30 23:00:00 CST 2003
Fri Oct 31 23:00:00 CST 2003</pre>
<p>
That's right, sometimes <tt>24 * 60 * 60</tt> is the wrong value for SecondsInDay.  Due to the switch from CDT to CST, 26 October 2003 has 25 hours, so adding SecondsInDay to the midnight time isn't sufficient to advance the day.
</p><p>
For whatever reason, when launched via remote ssh terminal, the interpreter doesn't seem to be aware of the locale (it shows the times as UTC), but when launched from EmbeddedKonsole, Time.now() is aware of the locale and manages the switch from CDT to CST automatically, leading to the bug.
</p><p>
Cute, no?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/10/17.html#a91" title="item permalink">posted&nbsp;4:23:12 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (91)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (91)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91">(link)</a>
</div>
  <p></p>


< Friday, 17 October 2003 >

A Timely Bug <sup><a href="http://radio.weblogs.com/0122027/2003/10/17.html#a91" title="item permalink">#</a></sup>


  <p>
I'm a sucker for quirky bugs.  Recently, I've been hacking around with <a href="http://c2.com/cgi/wiki?PhlIp" title="Ward's Wiki: PhlIp">PhlIp</a>'s excellent <a href="http://www.xpsd.com/MiniRubyWiki" title="XpSD Wiki: Mini Ruby Wiki">Mini Ruby Wiki</a> (more on that later), and discovered one such bug.
</p><p>
There's a block of code in MiniRubyWiki that renders a small calendar in HTML, not unlike your typical blog calendar widget.  Here's a small subset (the actual code is more interesting that this) which is largely although not completely unchanged from the original miniWiki.rb source.  See if you can spot the bug.
</p><pre>
  # here's a constant, declared elsewhere in the program
  SecondsInDay = 60 * 60 * 24
&nbsp;
  # ...
&nbsp;
  # In this loop we're rendering a four-week calendar,
  # from the beginning of last week until the end of the week after next.
  # "beginningOfLastWeek" is a Time indicating the Sunday of last week
&nbsp;
  today = Time.now()
  (0...28).each do |day|
    dayOnCalendar = beginningOfLastWeek + day * SecondsInDay
    # break the row every seven days
    calendar += '&lt;/tr&gt;&lt;tr&gt;' if day.divmod(7)[1] == 0
    calendar += '&lt;td'
    # highlight today
    if today.mday() == dayOnCalendar.mday() then
      calendar += ' bgcolor="#88ff88"'
    end
    calendar += '&gt;'
    # show the month for the first day in the calendar or in the month
    calendar += dayOnCalendar.strftime('%b') + ' ' if dayOnCalendar.mday == 1 or day == 0
    calendar += dayOnCalendar.mday.to_s()
&nbsp;
    # ...snip some stuff displayed within the calendar...
&nbsp;
    calendar += '&lt;/tr&gt;'
  end
</pre>
<p>&nbsp;</p>
<p>
I've been running this code on my Zaurus, sometimes launching it from the EmbeddedKonsole on the Zaurus itself, and sometimes from an ssh terminal running on a remote machine.  Eventually I noticed something funky about this.  When I launch the server from the ssh terminal, 1 November 2003 is listed, correctly, as a Saturday.  When I launch the server from a terminal on the Zaurus itself, 1 November isn't listed at all (the last day on the calendar is 31 October 2003, listed, incorrectly, as a Saturday).  In fact, when I launch the server from the Zaurus, Sunday, 26 October 2003 is listed twice.
</p><p>
Adding a "puts curDay.to_s" line inside that loop makes the problem obvious.  This output like the following:
</p>
<pre>Sun Oct 19 00:00:00 CDT 2003
Mon Oct 20 00:00:00 CDT 2003
Tue Oct 21 00:00:00 CDT 2003
Wed Oct 22 00:00:00 CDT 2003
Thu Oct 23 00:00:00 CDT 2003
Fri Oct 24 00:00:00 CDT 2003
Sat Oct 25 00:00:00 CDT 2003
Sun Oct 26 00:00:00 CDT 2003
Sun Oct 26 23:00:00 CST 2003
Mon Oct 27 23:00:00 CST 2003
Tue Oct 28 23:00:00 CST 2003
Wed Oct 29 23:00:00 CST 2003
Thu Oct 30 23:00:00 CST 2003
Fri Oct 31 23:00:00 CST 2003</pre>
<p>
That's right, sometimes <tt>24 * 60 * 60</tt> is the wrong value for SecondsInDay.  Due to the switch from CDT to CST, 26 October 2003 has 25 hours, so adding SecondsInDay to the midnight time isn't sufficient to advance the day.
</p><p>
For whatever reason, when launched via remote ssh terminal, the interpreter doesn't seem to be aware of the locale (it shows the times as UTC), but when launched from EmbeddedKonsole, Time.now() is aware of the locale and manages the switch from CDT to CST automatically, leading to the bug.
</p><p>
Cute, no?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/10/17.html#a91" title="item permalink">posted&nbsp;4:23:12 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (91)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (91)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=91&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F10%2F17.html%23a91">(link)</a>
</div>
  <p></p>


< Monday, 15 September 2003 >

Kudos to Jakarta Commons FileUpload <sup><a href="http://radio.weblogs.com/0122027/2003/09/15.html#a89" title="item permalink">#</a></sup>


  <p>
Recently <a href="http://www.sauria.com/blog/2003/09/13#580" title="Ted Leung: 13 Sep 2003: I don't want to read your damned source code">Ted</a> and <a href="http://www.freeroller.net/page/jdmarshall/20030912#disinterest_is_not_incompetence" title="Jason Marshall: 12 Sep 2003: Disinterest Is Not Incompetence">Jason</a> blogged on an old complaint: open source projects aren't well documented.
</p><p>
In a curious coincidence, at the same time I had an very positive experience with open source documentation.  Being a Jakarta Commons committer, and having done my share of multipart/form-data parsing in the past, I was vaguely familiar with <a href="http://jakarta.apache.org/commons/fileupload/" title="Apache's Jakarta Commons FileUpload">Commons FileUpload</a> but hadn't had much cause to look into it until recently.  Not only does it feature an easy-to-use API that works like a charm, the <a href="http://jakarta.apache.org/commons/fileupload/using.html">Using FileUpload</a> page tells one everything he needs to know to get up and running in minutes.
</p>
Granted FileUpload addresses a pretty limited domain, and <a href="http://jakarta.apache.org/commons/fileupload/customizing.html" title="Customizing FileUpload">not all the documentation is as complete</a>, but I can't remember the last time I picked up a Java library and started using it without even cracking open the JavaDocs.

  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/09/15.html#a89" title="item permalink">posted&nbsp;9:37:40 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=89&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F15.html%23a89" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (89)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=89&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F15.html%23a89">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=89&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F15.html%23a89" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (89)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=89&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F15.html%23a89">(link)</a>
</div>
  <p></p>


< Wednesday, 3 September 2003 >

"Almost is a synonym for not in project management" <sup><a href="http://radio.weblogs.com/0122027/2003/09/03.html#a88" title="item permalink">#</a></sup>


  <blockquote>Almost is a synonym for not in project management.</blockquote>
<p>- <a href="http://c2.com/cgi/wiki?ScottJohnson" title="Ward's Wiki: Scott Johnson">Scott Johnson</a> via <a href="http://c2.com/cgi/wiki?BinaryMilestone" title="Ward's Wiki: Binary Milestone">Ward's Wiki</a></p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/09/03.html#a88" title="item permalink">posted&nbsp;5:49:14 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=88&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F03.html%23a88" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (88)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=88&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F03.html%23a88">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=88&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F03.html%23a88" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (88)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=88&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F09%2F03.html%23a88">(link)</a>
</div>
  <p></p>


< Wednesday, 27 August 2003 >

Everything new is old again <sup><a href="http://radio.weblogs.com/0122027/2003/08/27.html#a87" title="item permalink">#</a></sup>


  <p>
Recently, <a href="http://ww.telent.net/diary/2003/8/#24.85680" title="Daniel Barlow -- Diary: Sun, 24 Aug 2003 23:48:00 GMT">Daniel</a>, <a href="http://www.sauria.com/blog/2003/08/27#527" title="Yep, time to stop copying">Ted</a>, <a href="http://linuxintegrators.com/hl40/blog/blog/?permalink=0021.html" title="OT: Everyone in open source/free software should read this like 10 times">Andy</a> and <a href="http://www.cincomsmalltalk.com/blog/blogView?showComments=true&amp;entry=3239427426" title="Time to invent">James</a> all point to a <a href="http://lists.fifthvision.net/pipermail/arch-users/2003-May/027591.html" title="[arch-users] [OT] Red Hat falls into ultimate hypocrisy?">post</a> by Tom Lord over on the <a href="http://lists.fifthvision.net/pipermail/arch-users/" title="The arch-users Archives">arch-users</a> mailing list.
</p><p>
Tom's comments are made in the context of <a href="http://www.sun.com/smi/Press/sunflash/2003-05/sunflash.20030519.4.html" title="Sun to Distribute Red Hat Enterprise Linux, Red Hat to Distribute Sun's Java">Red Hat's agreement to distribute Sun's JVM as part of their "Enterprise Linux" offering</a>, a story that (although I regularly program in Java and I'm writing this post on Red Hat box) quite frankly I haven't been following at all.  Much of what is interesting about Tom's comments may be a function of reading them outside of this context.
</p>
<p>
I find this a striking post, among other reasons, because it raises several distinct responses from me:
</p>
<dl><p>

<dt><b>1. What are we building?</b></dt>
<dd>
</dd></p><p>
Tom suggests:
</p>
<blockquote>
<p>There has been a sort of tension in the commercial free operating system world:</p>
<p>(a) Are we building a free alternative to proprietary software?</p>
<p>or</p>
<p>(b) Are we building a commodity, $0-price OS component to lower the cost of proprietary applications?</p>
</blockquote>
<p>For my part, this is a false dichotomy.  In my open source efforts I'm not trying to do either of these, but rather to simply <b>build something useful</b>.  Whether this something is an alternative or adjunct to proprietary software is incidental at best.  For that matter, whether this something is truly innovative or just a more useful variation of a component that already exists isn't terribly significant either (although the utility of copying something that's already readily available is limited of course).
</p><p>
I wonder if this a symptomatic of differing perspectives between the BSD-style and GPL-style camps of open source development.
</p>
<p>

<dt><b>2. How do we build it?</b></dt>
<dd>
</dd></p><p>
Tom writes:
</p>
<blockquote>
<p>
If the goal is (a), then we need an architect.  We need to come up with an inexpensive-to-develop architecture that, nevertheless, contains viable solutions for the needs of our markets.
</p><p>
If the goal is (b), then we need an anti-architect.  We need to come up with impossibly-expensive-to-fully-develop clone projects of proprietary software to draw off the energy of volunteer contributors who might otherwise undermine the value of the proprietary applications we expect to drive revenues for our distro.
</p>
</blockquote>
<p>
Here option B is obviously a straw-man, so of course I'll follow option A.  But while I agree we need "an inexpensive-to-develop architecture", and the word "architect" appears in my job title, I'll suggest a evolutionary approach is the best way to get there.  Inexpensive-to-develop systems of any interesting size, let alone federations of such systems, are rarely "architected" in a traditional sense.  <b>What we need is an environment where diverse ideas are allowed to compete, cooperate and breed</b>.
</p>
<p>

<dt><b>3. How hard is a Java implementation, really?</b></dt>
<dd>
</dd></p><p>
Running throughout Tom's post is the notion that a reasonably complete Java environment is simply too complicated to implement in an open source fashion:
</p>
<blockquote>
<p>
For example, under (a), we would probably have to admit that trying to
clone all the Java libraries _and_ build a competitive Java
implementation is too expensive a course of action.  While we might be
perfectly happy to ship a low-end, incomplete implementation to help
the low-end of the market, in the long run, we'd want to look for a
more clever solution: something that can compete with Java and Java
libraries on functionality, but that is cheaper to build in the first
place (and cheaper and more effective to apply, of course).
</p>
<p>[...]</p>
<p>
[Y]ou can also make things expensive to
develop by structuring them as an object oriented framework that you
then spend zillions on filling out with subclasses, or by making
really hard components (like finely tuned JIT compilers and garbage
collectors) critical to implementations.
</p>
<p>[...]</p>
<p>
Some architectures, such as the Java environments and the
view-tree/component-based GUI frameworks, are ideal for large
proprietary software companies with large command-and-control armies
of developers and QA practitioners.   Those architectures are a
terrible fit for the loose confederation of generally underresourced
developers in the free and open source software world.
</p>
</blockquote>
<p>
Putting aside questions of productivity and effectiveness, and the "enterprise" libraries for the moment, how hard is the core Java environment to implement, really?  More difficult than a Lisp implementation, for example, but I suspect it's not substantially more difficult to implement than, say, a C implementation, and probably on par with something like Ruby.
</p>
<p>

<dt><b>4. Where are the alternative Java implementations then?</b></dt>
<dd>
</dd></p><p>
Well, <a href="http://dmoz.org/Computers/Programming/Languages/Java/Implementations/" title="DMOZ: Computers/Programming/Languages/Java/Implementations">there are several</a> actually, although relatively few complete or robust ones.  Why?  Perhaps one compelling reason is that proprietary yet free (as in beer) Java runtime environments are readily available for most platforms.
</p>
<p>Besides, who really wants another Java platform anyway...</p>
<p>

<dt><b>5. "Yep, time to stop copying"</b></dt>
<dd>
</dd></p><p>
Like Daniel and Ted, I find the general call for innovation dead on:
</p>
<blockquote>
<p>
For a long time, the right strategy for GNU was to build a basic unix replacement differentiated primarily by licensing. [...]</p><p>
Well, that part's done and the strategy won.
</p><p>
[...]
</p><p>
If the goal is still "(a) build a free alternative to proprietary software", then a new strategy is called for: competition on <i>software architecture</i>, not just licensing.
</p>
</blockquote>
<p>
Here Tom and I are in violent agreement.  If I were building an open source compiler and/or language-platform, I'd certainly think twice about doing it on <a href="http://www.tbray.org/ongoing/When/200x/2003/07/12/WebsThePlace" title="The Webs the Place">Sun's plantation</a>--not because it's too hard; in part (as before) because the utility of copying something that's already readily available is limited; but mostly because I think you could construct more useful environments.
</p><p>
It's worth applying this, independently, to the "enterprise libraries" I set aside earlier.  Are J2EE implementations like <a href="http://incubator.apache.org/projects/geronimo.html">Apache Geronimo</a> or <a href="http://jboss.org">JBoss</a> building something "useful" or a "$0-price OS component to lower the cost of proprietary applications"?  From my perspective, I've found some pieces of the J2EE suite to be quite useful, and others seem to fit Tom's "proprietary vendor" strategy.
</p>
<p>

<dt><b>6. Except when it isn't</b></dt>
<dd>
</dd></p><p>
It's interesting to observe how quickly the arch-users thread evolves from "we need a new architecture" to "we need a Lisp platform".  (It's doubly interesting to note how often that seems to be the case.)  And perhaps that really is what we need.  But there's a big difference between "time to stop copying" and "time to stop copying Java".
</p><p>
(Actually, although I think one could do much better than to copy Java, you could also do much worse.  It would be naive to think that Java's success is purely coincidental or purely the result of marketing muscle.  They must be doing something right.)
</p><p>
More generally, it would be naive to think that what we need is innovation for innovation's sake, and I think deciding we need to resurrect a 40 year old platform is evidence of this fact.
</p><p>

<dt><b>7. What are we building, revisited.</b></dt>
<dd>
</dd></p><p>Tom writes:</p>
<blockquote>
Nowadays, the proprietary competition is about databases, and
productivity apps, and browsers, and middleware layers.  The software
we're competing against is not like unix: it isn't simple; it wasn't
built by a small number of people; it's a moving target.  It
isn't a tractable project to clone this proprietary software under
different licensing.
</blockquote>
<p>
This point is puzzling.  Certainly we don't mean to assert that it is impossible to successfully build
<a href="http://www.mysql.com/" title="MySQL, &quot;the world's most popular open source database&quot;">open</a>
<a href="http://www.postgresql.org/" title="PostgreSQL, &quot;the world's most advanced open source database software&quot;">source</a>
<a href="http://axion.tigris.org/index.html" title="Axion, the Java Database">databases</a>,
<a href="http://mozilla.org/" title="Mozilla.org">web</a>
<a href="http://www.konqueror.org/" title="Konqueror - Web Browser, File Manager - and more!">browsers</a>,
or <a href="http://zope.org/" title="Zope: an open source application server">middleware</a>
<a href="http://www.mico.org/" title="MICO: a freely available and fully compliant implementation of the CORBA standard">servers</a>,
do we?
Do we assert it is a bad idea to do so?
</p><p>
While I certainly think we should look for innovative ways to solve the sorts of problems these projects do,
it would be a mistake to believe that the existing approaches don't offer something of value simply because they have strong proprietary implementations as well--just as it would have been a mistake for the GNU project to reject a pipe-and-filter architecture simply because a strong implementation was once controlled by Bell Labs.  I don't think it is tractable to create a wholly new software paradigm--one that doesn't contain variations of n-tier, database and web technologies--out of thin air.  We need new ideas, but we need old ones too.
</p>

</dl>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/27.html#a87" title="item permalink">posted&nbsp;7:26:57 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=87&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F27.html%23a87" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (87)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=87&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F27.html%23a87">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=87&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F27.html%23a87" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (87)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=87&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F27.html%23a87">(link)</a>
</div>
  <p></p>


< Friday, 22 August 2003 >

The Social Life of Paper <sup><a href="http://radio.weblogs.com/0122027/2003/08/22.html#a86" title="item permalink">#</a></sup>


  <a href="http://www.gladwell.com/2002/2002_03_25_a_paper.htm"><i>The Social Life of Paper: Looking for method in the mess</i></a>, an essay by Malcolm Gladwell, is fascinating from a number of perspectives.<p>

[Via <a href="http://icite.net/blog/blojsim-200308234-135720785-jabber.txt" title="Read " The="" Social="" Life="" of="" Paper""="">Jay Fienberg's iCite.net</a>]
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/22.html#a86" title="item permalink">posted&nbsp;3:30:29 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (86)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (86)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86">(link)</a>
</div>
  <p></p>


< Friday, 22 August 2003 >

The Social Life of Paper <sup><a href="http://radio.weblogs.com/0122027/2003/08/22.html#a86" title="item permalink">#</a></sup>


  <a href="http://www.gladwell.com/2002/2002_03_25_a_paper.htm"><i>The Social Life of Paper: Looking for method in the mess</i></a>, an essay by Malcolm Gladwell, is fascinating from a number of perspectives.<p>

[Via <a href="http://icite.net/blog/blojsim-200308234-135720785-jabber.txt" title="Read " The="" Social="" Life="" of="" Paper""="">Jay Fienberg's iCite.net</a>]
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/22.html#a86" title="item permalink">posted&nbsp;3:30:29 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (86)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (86)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=86&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F22.html%23a86">(link)</a>
</div>
  <p></p>


< Wednesday, 20 August 2003 >

A Solution to Kata Fifteen <sup><a href="http://radio.weblogs.com/0122027/2003/08/20.html#a84" title="item permalink">#</a></sup>


  <p>
What fun! <a href="http://pragprog.com/pragdave">Dave</a>'s <a href="http://pragprog.com/pragdave/Practices/Kata/KataFifteen.html,v" title="Kata 15: A Diversion">latest Kata</a> is a little math problem, and it features everyone's second favorite example of recursion.
</p>
<blockquote>
<p>
Think of binary numbers: sequences of 0's and 1's. How many n-digit binary numbers are there that don't have two adjacent 1 bits? For example, for three-digit numbers, five of the possible eight combinations meet the criteria: 000, 001, 010, <strike>011</strike>, 100, 101, <strike>110</strike>, <strike>111</strike>. What is the number for sequences of length 4, 5, 10, n?
</p>
</blockquote>
<p>
Flexing the "proofs" part of my brain for the first time in long while, I think I've got both the solution and a proof for this.  I've developed this solution independently, so there are probably more elegant proofs available.
</p><p>
Spoiler Warning: If you'd like to work this Kata yourself, beware, spoilers follow.  I'll leave some blank space first.
</p><p>

</p><p align="center">&nbsp;</p>
<p align="center">&nbsp;...&nbsp;</p>
<p align="center">&nbsp;</p>
<p align="center"><b>spoilers follow</b></p>
<p align="center">&nbsp;</p>
<p align="center">&nbsp;...&nbsp;</p>
<p align="center">&nbsp;</p><p>

</p><h2>Definitions and Notation</h2>
<p>
First, let's define some terms.
</p><p>
Let <nobr><i>S<sub>n</sub></i></nobr> be the set of binary sequences of length <i>n</i>.  Note that
<nobr>|<i>S<sub>n</sub></i>| = 2<sup><i>n</i></sup></nobr>.
</p><p>
Let <nobr><i>F<sub>n</sub></i></nobr> be the set of sequences of binary sequences of length <i>n</i> that do not contain two consecutive 1 bits.  The Kata asks us to determine <nobr>|<i>F<sub>n</sub></i>|</nobr>.  I'll call that <nobr><i>f(n)</i></nobr>.
</p><p>
By inspection, it's easy to work out the first few values of <i>f(n)</i>.  Note that when <i>n</i>=0, we can count the empty sequence.
</p>
<table border="1" cellspacing="0" cellpadding="2" align="center">
<tbody><tr>
 <th><i>n</i></th>
 <th>|<i>S<sub>n</sub></i>|</th>
 <th><i>f(n)</i></th>
</tr><tr>
 <td align="right">0</td><td align="right">1</td><td align="right">1</td>
</tr><tr>
 <td align="right">1</td><td align="right">2</td><td align="right">2</td>
</tr><tr>
 <td align="right">2</td><td align="right">4</td><td align="right">3</td>
</tr><tr>
 <td align="right">3</td><td align="right">8</td><td align="right">5</td>
</tr><tr>
 <td align="right">4</td><td align="right">16</td><td align="right">8</td>
</tr><tr>
 <td align="right">5</td><td align="right">32</td><td align="right">13</td>
</tr>
</tbody></table>
<p>
To make the proof a little bit easier, I'll introduce some additional notation.
</p><p>
Let <i>concat(a,b)</i> be a
function that maps a pair of sequences to a new sequence by prefixing the first to the second.  For example,
<nobr>concat(1,0) = 10</nobr> and <nobr>concat(10,1101) = 101101</nobr>.
</p><p>
Let <i>CONCAT(a,B)</i> be
function that maps a sequence and a set of sequences to a new set of sequences obtained by prefixing the sequence
<i>a</i> to each sequence in the set <i>B</i>.  In other words,
<nobr>CONCAT(<i>s</i>,<i>T</i>) := { concat(<i>s</i>,<i>t</i>) : <i>t</i> in <i>T</i> }</nobr>.
</p><p>

</p><h2>The Theorem</h2>
<p>
If you're familiar with it, it is easy to recognize <i>f(n)</i> to be the Fibonacci Sequence, at least for small values of <i>n</i>.  So here it is in theorem form:  If <i>f</i>(<i>n</i>) is the number of binary sequences of length <i>n</i> that do not contain two consecutive 1 bits, then:
</p>
<pre>
<i>f</i>(0) = 1
<i>f</i>(1) = 2
<i>f</i>(<i>n</i>) = <i>f</i>(<i>n</i>-1) + <i>f</i>(<i>n</i>-2) for all <i>n</i> &gt; 1
</pre>
<h2>The Proof</h2>
<p>
That <nobr><i>f</i>(0) = 1</nobr> and <nobr><i>f</i>(1) = 2</nobr> can be readily seen by inspection.  We'll only need to demonstrate the part of the theorem that applies to <nobr><i>n</i> &gt;= 2</nobr>.
</p><p>
Note that the set <nobr><i>S<sub>n</sub></i></nobr> can be seen as the union of two disjoint sets derived from  <nobr><i>S<sub>n-1</sub></i></nobr>, those that start with a 0 and those that start with a 1:
</p><pre>
<i>S<sub>n</sub></i> = CONCAT(0,<i>S<sub>n-1</sub></i>) union CONCAT(1,<i>S<sub>n-1</sub></i>)
</pre>
<p>
Similarly, <nobr>CONCAT(1,<i>S<sub>n-1</sub></i>)</nobr> can be seen as the union of two disjoint sets derived from  <nobr><i>S<sub>n-2</sub></i></nobr>, those that start with 11 and those that start with 10:
</p>
<pre>
CONCAT(1,<i>S<sub>n-1</sub></i>) = CONCAT(11,<i>S<sub>n-2</sub></i>) union CONCAT(10,<i>S<sub>n-2</sub></i>)
</pre>
<p>
Hence <nobr><i>S<sub>n</sub></i></nobr> can be seen as the union of three disjoint sets:
</p>
<pre>
<i>S<sub>n</sub></i> = CONCAT(0,<i>S<sub>n-1</sub></i>) union CONCAT(11,<i>S<sub>n-2</sub></i>) union CONCAT(10,<i>S<sub>n-2</sub></i>)
</pre>
<p>
For convenience, let's name each of those three sets:
</p>
<pre>
Let <i>A</i> = CONCAT(0,<i>S<sub>n-1</sub></i>)
Let <i>B</i> = CONCAT(11,<i>S<sub>n-2</sub></i>)
Let <i>C</i> = CONCAT(10,<i>S<sub>n-2</sub></i>)
<i>S<sub>n</sub></i> = <i>A</i> union <i>B</i> union <i>C</i>
</pre>
<p>
Since the sets <i>A</i>, <i>B</i> and <i>C</i> represent a proper partitioning of <nobr><i>S<sub>n</sub></i></nobr>,
we can determine <nobr><i>F<sub>n</sub></i></nobr> by determining the sequences that meet the conditions in each of the sets
independently.
</p><p>
How many sequences in <i>A</i> are in
<nobr><i>F<sub>n</sub></i></nobr>?  The answer must be <nobr><i>f</i>(<i>n-1</i>)</nobr>, since prefixing a 0 bit won't change whether or not a sequence contains two consecutive 1 bits.
</p><p>
How many sequences in <i>B</i> are in
<nobr><i>F<sub>n</sub></i></nobr>?  The answer must be 0, since our prefix alone already rules out all of those sequences.
</p><p>
How many sequences in <i>C</i> are in
<nobr><i>F<sub>n</sub></i></nobr>?  The answer must be <nobr><i>f</i>(<i>n-2</i>)</nobr>, since prefixing 10 won't change whether or not a sequence contains two consecutive 1 bits.
</p>
<p>Hence:</p>
<pre>
<i>F<sub>n</sub></i> = CONCAT(0,<i>F<sub>n-1</sub></i>) union CONCAT(10,<i>F<sub>n-2</sub></i>)
</pre>
<p>and</p>
<pre>
<i>f</i>(<i>n</i>) = |<i>F<sub>n</sub></i>|
     = |CONCAT(0,<i>F<sub>n-1</sub></i>)| + |CONCAT(10,<i>F<sub>n-2</sub></i>)|
     = <i>f</i>(<i>n</i>-1) + <i>f</i>(<i>n</i>-2)
</pre>
<p>Q.E.D.</p>
<h2>Comments</h2>
<p>
For some reason, I had initially thought I'd be clever and reverse the problem.  Why count the number of sequences that <i>don't</i> meet some condition, but instead count those that do?  This yields the sequence 0, 0, 1, 3, 8, 19, ....  Other that starting with the Fibonacci-like 0, 0, it didn't seem recognizable at all to me.  (More generally, this sequence is <nobr>2<sup><i>n</i></sup> - <i>fibonacci</i>(<i>n</i>)</nobr>.)
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/20.html#a84" title="item permalink">posted&nbsp;4:59:34 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=84&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F20.html%23a84" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (84)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=84&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F20.html%23a84">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=84&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F20.html%23a84" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (84)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=84&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F20.html%23a84">(link)</a>
</div>
  <p></p>


< Tuesday, 19 August 2003 >

David Byrne on PowerPoint <sup><a href="http://radio.weblogs.com/0122027/2003/08/19.html#a83" title="item permalink">#</a></sup>


  <p>
Via Wired, <a href="http://www.wired.com/wired/archive/11.09/ppt1.html" title="Learning to Love PowerPoint - Wired - September 2003">David Byrne on PowerPoint</a>:
</p>
<blockquote>
<p>
Having never used the program before, I found it limiting, inflexible, and biased, like most software. On top of that, PowerPoint makes hilariously bad-looking visuals. But that's a small price to pay for ease and utility. We live in a world where convenience beats quality every time. It was, for my purposes, perfect.
</p><p>
<a href="http://www.wired.com/wired/archive/11.09/images/FT_pp1_arrows.jpg"><img src="http://www.wired.com/wired/archive/11.09/images/FT_pp1_arrows.jpg" width="175" height="135" align="right" alt="Image by David Byrne"></a>
</p><p>
I began to see PowerPoint as a metaprogram, one that organizes and presents stuff created in other applications. Initially, I made presentations about presentations; they were almost completely without content. The content, I learned, was in the medium itself. I discovered that I could attach my photographs, short videos, scanned images, and music. What's more, the application can be made to run by itself -no one even needs to be at the podium. How fantastic!
</p><p>
Although I began by making fun of the medium, I soon realized I could actually create things that were beautiful. I could bend the program to my own whim and use it as an artistic agent. The pieces became like short films: Some were sweet, some were scary, and some were <i>mysterioso</i>. I discovered that even without text, I could make works that were "about" something, something beyond themselves, and that they could even have emotional resonance. What had I stumbled upon? Surely some techie or computer artist was already using this dumb program as an artistic medium. I couldn't really have this territory all to myself -or could I?
</p>
</blockquote>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/19.html#a83" title="item permalink">posted&nbsp;11:06:05 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=83&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F19.html%23a83" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (83)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=83&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F19.html%23a83">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=83&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F19.html%23a83" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (83)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=83&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F19.html%23a83">(link)</a>
</div>
  <p></p>


< Monday, 18 August 2003 >

Adaptive vs. Predictive Planning <sup><a href="http://radio.weblogs.com/0122027/2003/08/18.html#a82" title="item permalink">#</a></sup>


  <p>
At my day job, we develop what seems to be a wide variety of systems: several subscription based web sites, a suite of desktop applications, an e-commerce system for selling both subscriptions and physical products, and various financial, administrative, content management, editorial and reporting systems for supporting them.  We've been developing most of those systems under a locally adapted form of XP for about three years now.
</p><p>
For a lot of what we do an agile process works well.  We're often making "small" modifications to a running (production) system, so a process that allows the customer to say "here's a set of changes, implement and deploy them in the next couple of weeks" fits our needs rather  well.  Even the least imaginative customer is typically able to break down large changes into an incremental series of small ones, and is often happy to see the intermediate steps in a running (although not always production) system.
</p><p>
Allow me to call this approach "adaptive" planning. (I don't think I'm the first to do so.)  An interesting feature, perhaps the defining feature, of this adaptive approach is that customer is often defining new requirements as we're implementing the old ones, so that we're not always exactly sure where we're going when we start.  It's sort of like a hill climbing approach: we take a few steps in what seems to be the right direction and then reevaluate.  Our plan adapts to changing business requirements and generally doesn't try to look very far ahead in any detail.
</p><p>
It doesn't take a lot of insight to see that an adaptive approach is well suited to what might be called "product" as opposed to "project" management.  If one conceives of the system as long-lived, constantly improving entity, it's easier to be comfortable with an iterative development process. No one can really foresee where the system is going to end up anyway, so the urge to ask "when is it going to be done?" is lessened.
</p><p>
On the other hand, there are times when the customer wants, or at least thinks he wants, a more predictive planning process:  "Here's a large set of requirements, when are they going to be met?"  This question is important because the answer will often drive business deals, strategic planning, and revenue projections.  Depending upon the time sensitivity of the opportunity, the answer may determine whether the project is worth initiating at all.
</p><p>
Frankly, I don't think our process is very good at answering this sort of question.  In practice, the way we approach such a question is quite similar to most "traditional" methodologies: we'll collect coarse grained requirements and prepare coarse grained estimates for them.  This process is often time consuming--the customer team will spend weeks struggling to define and communicate a "base" set of requirements for estimation purposes.  The result is often unsatisfactory--poorly understood and poorly articulated requirements lead to poor estimates.
</p><p>
One solution is to somehow dissuade the customer from believing that he needs detailed planning or long term predictions.  Sometimes it really is a distinction without a difference--we're going to do the work anyway, so knowing precisely what features make it into the version 1.0 release or precisely when this release will occur are details that can be determined later.  Most projects end with some negotiation of scope and schedule anyway.  The trouble is, sometimes accurate predictions really do matter.
</p><p>
Another solution is to accept the limitations of this predictive approach--we don't really know how long it will take to complete the project, or what "complete" really means in the first place, so the best we can do is take an educated guess and know that the margin of error (and therefore the risk) is high.  True as it may be, this answer is unsatisfactory at best, and unacceptable at worst.  The fact that traditional planning approaches don't fare much better is little consolation.
</p><p>
We've been through this "predictive" planning exercise perhaps four times in the past three years, and have found it to be successful, but only moderately so.  Increasingly I am beginning to believe that the adaptive process may be a more effective way of arriving at accurate predictions anyway.  Through a lack of information, insight, or political capital, I've never seen it played this way, but I'm beginning to think this is the right approach:
</p><p>
Rather than spending a couple of weeks (or more) trying to determine a rough but "complete" estimate for the total cost of the project, spend that time developing an implementation of some of the base features (call it a "spike solution" or prototype if that helps, but it's really neither of those things).  The requirements will certainly be incomplete, maybe even wrong.  The implementation is likely to be wrong too, or will be when the requirements are better understood.  I think that that may not matter.
</p><p>
Part of what leads me to this conclusion is that this is what we really do anyway.  Although the thought is "let's not go down this road until we're sure that's what we want to do", in practice what we'll struggle to determine what the "total cost" of the project is going to be until it becomes clear that if we don't initiate the development soon, we won't be able to hit the requisite dates anyway.  We may only be 60% sure that the project is worth pursuing, but the schedule eventually makes the decision for us.  Indeed, this is how we first adopted an XP practice: as a way out of the "analysis paralysis" threatening a major product initiative.
</p><p>
(This last-minute adaptive approach is expensive in at least a couple of ways.  Firstly, by the time a deadline is looming, we no longer have the luxury of slowly ramping up size the development team, we need to throw all our developers at the system immediately.  This is a chaotic way of doing green-field development.  Secondly, when we follow this approach, it's rarely the most important features we attack first, it's the ones that are easiest to define.)
</p><p>
I think this "just get started" approach may bring several benefits over a predict-then-implement one.  Having a working system, however rudimentary...
</p>
<ul>
<li><p>makes the total cost estimate more accurate simply by virtue of having some of the requirements already implemented.  We don't need to guess what those will cost--they're already done.</p></li>
<li><p>makes the development team more confident about their ability to address the remaining requirements.</p></li>
<li><p>makes the development team better able to predict what's going to be tricky and what isn't.  We have some measure of the team's velocity when working on the system in question.  As a result, estimates should be more accurate.</p></li>
<li><p>provides the customer team with a reference point to work from.  Rather than saying "here's what the final system will look like", they can be begin to express requirements as "here's how I want to you change the existing system."</p></li>
<li><p>may give the customer team enough confidence in the development team's ability to deliver the end product to follow an iterative/evolutionary approach.  Once it's clear that we can deliver <i>something</i> by the deadline, it may be less important precisely what that something is.</p></li>
</ul>
<p>
Of course, the customer team can in parallel continue to define and refine the requirements and seek a "total cost" estimate, but at least for these first few iterations, we don't need to worry too much about the total scope of the project
</p><p>
There is some risk here, namely that after a couple of weeks of development it becomes clear that this is not a project worth pursuing and hence the development effort in those first few weeks is wasted.  I can't imagine that this cost is significantly greater than the cost of the predictive analysis, but for better or worse in my environment there is a general impression that development resources are precious and hence need to be conserved--it's better to waste "analysis" time than "development" time.  Overcoming this impression may be the key to selling this approach.
</p><p>
Looking over what I've written here, it looks like I'm describing a straight-forward XP process, and perhaps I am.  In some ways, the distinction may be in the <i>reasons</i> for the adaptive approach.  In our typical agile project, we sell the just-in-time requirements definition process as a way to get development moving while the business is still working out requirements.  When predictive questions are asked, the business often believes that the requirements are already defined (although in practice they're often not as well defined as the customer may believe), only the technical cost needs to be determined.  In this case the iterative development cycle may be more valuable to the technical team than to the business.
</p><p>
It may be interesting to explore how to use an adaptive planning process to answer predictive planning questions.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/18.html#a82" title="item permalink">posted&nbsp;11:13:05 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=82&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F18.html%23a82" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (82)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=82&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F18.html%23a82">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=82&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F18.html%23a82" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (82)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=82&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F18.html%23a82">(link)</a>
</div>
  <p></p>


< Friday, 15 August 2003 >

Commons Logging was my fault <sup><a href="http://radio.weblogs.com/0122027/2003/08/15.html#a81" title="item permalink">#</a></sup>


  <p>
I'll come right out and admit it: <a href="http://jakarta.apache.org/commons/logging.html" title="Jakarta Commons Logging">commons-logging</a>, at least in its initial form, was my fault, though probably not mine alone.
</p><p>
Back in 2001 I did a fair bit of work <a href="http://google.com/search?q=cache:www.mail-archive.com/jakarta-commons%40jakarta.apache.org/msg03954.html" title="&quot;[httpclient] refactoring httpclient&quot; (from jakarta-commons@jakarta.apache.org, 27 Aug 2001) [google cache]">refactoring and debugging</a> <a href="http://jakarta.apache.org/commons/httpclient" title="Jakarta Commons HttpClient">commons-httpclient</a>.  As part of that effort, I replaced a custom setDebug()/System.out.println based logging system with <a href="http://jakarta.apache.org/log4j/" title="Apache's Jakarta Log4J">log4j</a>.  I did this for several reasons but all of them come down to the fact that a fully-fledged logging system is often quite useful.  In fact, that debugging effort probably wouldn't have happened without it.
</p><p>
This change turned out to be controversial, and a runtime dependency upon log4j was in fact <a href="http://google.com/search?q=cache:www.mail-archive.com/jakarta-commons%40jakarta.apache.org/msg02694.html" title="&quot;Re: [httpclient] logging and testing changes&quot; (from jakarta-commons@jakarta.apache.org, 27 Jul 2001) [google cache]">vetoed</a>.  After an enormous amount of discussion, not all of it pretty, a <a href="http://google.com/search?q=cache:www.mail-archive.com/jakarta-commons%40jakarta.apache.org/msg02778.html" title="&quot;Re: [httpclient] [VOTE] HTTP client 1.0 release&quot; (from jakarta-commons@jakarta.apache.org, 1 Aug 2001) [google cache]">compromise</a> was finally agreed to.  This compromise basically said (a) use a thin wrapper around either log4j or the System.out logging initially implemented and (b) allow the user to specify whether to use log4j or System.out.println based upon a method call (inversion-of-control style I guess) or an external property.  I did the first implementation of this.  It was later <a href="http://google.com/search?q=cache:www.mail-archive.com/jakarta-commons%40jakarta.apache.org/msg02794.html" title="&quot;logging again (was RE: [httpclient] [VOTE] HTTP client 1.0 release)&quot; (from jakarta-commons@jakarta.apache.org, 3 Aug 2001) [google cache]">suggested</a>, probably reasonably so, that this "log wrapping" package be extracted from httpclient for use in similar circumstances.  In a more robust or complicated form (depending upon your perspective) this eventually became commons-logging.
</p><p>
For all its warts, this brief history of Commons Logging shows the "bazaar-style" of open source development working as it should: the operative word here being "compromise".
</p><p>
Personally, I don't believe it to be especially important that Jakarta Commons committers be able to express their creativity by the selection of logging frameworks.  I'd have been happy simply using log4j, and I think Ceki's work with the "light" log4j-ME would have been sufficient to address most of the technical concerns raised.  Yet others disagree, and I'll respect that position.  Certainly respect for that position has encouraged advocates of <a href="http://avalon.apache.org/logkit/" title="Apache Avalon LogKit">alternative logging implementations</a> to participate more fully in Jakarta Commons.
</p><p>
That said, I think <a href="http://www.freeroller.net/page/fate/20030811#the_evils_of_commons_logging" title="The evils of commons-logging.jar and its ilk">Hani</a> and <a href="http://www.freeroller.net/page/gstamp/20030812#commons_logging" title="Commons logging">Glen</a> miss the point entirely.  The purpose of Commons Logging is <i>not</i> to isolate your code from changes in the underlying logging framework.  (That's certainly easy enough to do on your own, and not really worth doing in the first place given the ease of switching from one logging framework to another.)  The purpose of Commons Logging is <i>not</i> to somehow be more useful than actual logging frameworks by being more general.  The purpose of Commons Logging is <i>not</i> to somehow take the logging world by storm.  In fact, there are very limited circumstances in which Commons Logging is useful. If you're building a stand-alone application, don't use commons-logging.  If you're building an application server, don't use commons-logging.  If you're building a moderately large framework, don't use commons-logging.  If however, like the Jakarta Commons project, you're building a tiny little <i>component</i> that you intend for other developers to embed in their applications and frameworks, and you believe that logging information might be useful to those clients, and you can't be sure what logging framework they're going to want to use, then commons-logging might be useful to you.
</p><p>
On a slightly unrelated note, I think that Hani's post fails to adequately explain how the problems caused by trying to integrate systems that use incompatible versions of the same component are unique to Commons Logging.  If you want a discussion of the technical issues with Commons Logging, which are quite genuine, there are <a href="http://www.qos.ch/logging/thinkAgain.html" title="Ceki's &quot;Think again before adopting the commons-logging API&quot;">much better analyses</a> available.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/15.html#a81" title="item permalink">posted&nbsp;12:59:08 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=81&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F15.html%23a81" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (81)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=81&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F15.html%23a81">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=81&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F15.html%23a81" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (81)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=81&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F15.html%23a81">(link)</a>
</div>
  <p></p>


< Thursday, 14 August 2003 >

A chemist, a physicist and a computer scientist were traveling in a car... <sup><a href="http://radio.weblogs.com/0122027/2003/08/14.html#a80" title="item permalink">#</a></sup>


  <p>
I have to give a product demo this morning.  Although I hope I don't need to use it today, I'm reminded of a little joke I used to tell back in my consulting days to keep the customer occupied when a problem forced me to do an unexpected restart, reboot or reinstall in the midst of a demonstration:
</p>
<blockquote>
<p>A chemist, a physicist and a computer scientist were traveling in a car when the engine suddenly puttered out and they were forced to pull over to the side of the road.</p>
<p>"We must be out of fuel", the chemist said, "but I just saw a gas station.  I'll walk back and pick some up."</p>
<p>"No, no", said the physicist, "that clearly sounded like a mechanical problem.  Let me pop the hood and take a look."</p>
<p>"Wait!", said the computer scientist. "I have an idea.  Let's all get out of the car&nbsp;.&nbsp;.&nbsp;.&nbsp;and then get back in."</p>
</blockquote>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/14.html#a80" title="item permalink">posted&nbsp;7:17:35 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=80&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F14.html%23a80" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (80)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=80&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F14.html%23a80">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=80&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F14.html%23a80" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (80)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=80&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F14.html%23a80">(link)</a>
</div>
  <p></p>


< Monday, 11 August 2003 >

Quickie Radio Tidbits <sup><a href="http://radio.weblogs.com/0122027/2003/08/11.html#a78" title="item permalink">#</a></sup>


  <ul>
<li>Radio now supports <a href="http://www.movabletype.org/trackback/" title="MovableType: TrackBack Development">TrackBack</a>.  See <a href="http://radio.userland.com/discuss/msgReader$26639" title="TrackBack for Radio">TrackBack for Radio</a> for details, but the gist of it is this: (a) enable TrackBack through your <a href="http://127.0.0.1:5335/system/pages/prefs?page=2.17" title="your (localhost) trackback preferences page">TrackBack preferences page</a> then (b) invoke the <tt>&lt;%trackbackLink%&gt;</tt> macro somewhere within your <a href="http://127.0.0.1:5335/system/pages/prefs?page=3.4" title="your (localhost) item template page">item template</a>. </li>
<li>As you can see, I've got trackback links turned on in this blog now.  I've also added direct (non-JavaScript) links to my comments and trackback pages.  I did this by adding <tt>&lt;%radio.weblog.getCommentLink(&lt;%itemNum%&gt;, adrblog)%&gt; </tt>and <tt>&lt;%radio.weblog.getTrackbackLink(&lt;%itemNum%&gt;, adrblog)%&gt;</tt> calls to my item template.</li>
<li>I've finally figured out where many of the built-in Radio macros are stored.  From the Radio application, go to <tt>Window:Radio.Root:system:verbs:radio:weblog</tt>.  The <tt>system/verbs</tt> tree has a number of nifty macros, including <tt>radio.weblog.getUrl</tt>, which generates the absolute URL of your Radio homepage.  This is the answer to a question I had <a href="http://radio.weblogs.com/0122027/stories/2003/04/11/radioTidbits.html#waypathit">previously asked</a>.</li>
<li>Another pair of interesting macros I discovered there are <tt>radio.macros.previousDayLink</tt> and <tt>radio.macros.nextDayLink</tt>, which should generate day-to-day links in your archive pages.  I've got this set up in my archives now, but there seem to be minor problems here and there.  For example, the previous day link from <a href="http://radio.weblogs.com/0122027/2003/07/16.html" title="The [L]GPL, Java and Asymmetry">Wednesday, 16 July 2003</a> goes to <a href="http://radio.weblogs.com/0122027/2003/07/14.html" title="Given enough eyeballs, are all trends shallow?">Monday, 14 July 2003</a>, skipping over the post on <a href="http://radio.weblogs.com/0122027/2003/07/15.html" title="my pet bug, or another example of how sun doesn't get community development">Tuesday, 15 July 2003</a>.</li>
</ul>
<p>
When I get a chance, I'll type these up for my <a href="http://radio.weblogs.com/0122027/stories/2003/04/11/radioTidbits.html" title="Radio Tidbits">Radio Tidbits</a> page.
</p><p>
PS: I'd love it if someone could point me to a definitive reference to Radio's scripting language.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/11.html#a78" title="item permalink">posted&nbsp;11:26:32 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=78&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F11.html%23a78" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (78)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=78&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F11.html%23a78">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=78&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F11.html%23a78" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (78)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=78&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F11.html%23a78">(link)</a>
</div>
  <p></p>


< Friday, 8 August 2003 >

In Defense of XML <sup><a href="http://radio.weblogs.com/0122027/2003/08/08.html#a77" title="item permalink">#</a></sup>


  <p>
Recently I've read a number of comments (some <a href="http://www.toolshed.com/blog/News/LastArtima.html,v" title="/\ndy's Weblog: Forensic Analysis and Plain Text">old</a> and some <a href="http://www.freeroller.net/page/fate/20030801#as_stable_and_maintanable_as" title="Bile Blog: As stable and maintainable as jelly">new</a>) that take issue with the use of XML for one purpose or another (in the above examples, Ant and Jelly scripts, respectively).  In fact, it seems all the cool kids are <a href="http://www.google.com/search?q=xml+sucks" title="Google on &quot;xml sucks&quot;">XML detractors</a> these days, although the coolness may have peaked a few months ago, when even Tim Bray was <a href="http://www.tbray.org/ongoing/When/200x/2003/03/16/XML-Prog" title="ongoing: XML Is Too Hard For Programmers">admitting</a> that XML may not be as nifty as first thought.
</p><p>
Now, I'll certainly admit that XML has its drawbacks.  Is it overly verbose?  Often.  <a href="http://okmij.org/ftp/Scheme/xml.html#SXML-spec" title="XML and Scheme: SXML specification">An equivalent s-expression syntax</a> would be more concise and (for Lisp developers at least) more useful.  Is it hard to read? At times.  It's certainly better suited for documents where the ratio of text to tags is high.  Is XML often used for developer convenience at the expense of user convenience? Is there information that has no business being in an XML format, but that developers or vendors insist on making XML anyway? Yes, yes, of course.
</p><p>
(On a related note, if "executable XML" is such a bad idea, how does one explain the longevity of Lisp?)
</p><p>
Despite these limitations, there is some value in selecting XML over, say (as Andy Hunt suggested for Ant) some arbitrary context-free grammar.
</p><p>
Part of this value is the ease with which a developer can drop in an XML parser, but that's only an indirect source of value.  Part of this value is the comfort that users familiar with popular SGML applications (read "HTML") have with the angle bracket notation, but that may only explain the quick adoption.
</p><p>
The real value of XML is in the tool chain.
</p><p>
Suppose Ant had been based upon some custom, non-XML grammar.  What would we lose?
</p><p>
Well for one, nearly every programmer's editor has a syntax coloring, well-formedness-checking mode for XML (certainly emacs and vi, or at least vim, and nearly anything that calls itself an IDE).  Moreover, many editors support DTD or Schema validation as well, perhaps even tag and attribute completion.  Using an XML format means a host of editors can handle Ant scripts smartly.  The same would probably not have been true, at least initially, with some arbitrary grammar.
</p><p>
How does this come about?  Well in part because XML is a popular format, but also because of the ease with which a developer can drop in an XML parser and other libraries.
</p><p>
For another advantage, consider <a href="http://www.wdvl.com/Authoring/Languages/XML/XMLFamily/BigPicture/bigpix20a.html" title="Big Picture of the XML Family of Specifications">the plethora of XML-based or XML-extending specifications</a>.  Many commentators have looked at that dense diagram and scoffed: not everything is well suited for an XML representation.  Yet few would deny that at least some of those technologies do something truly useful.
</p><p>
Similarly, consider the number of tools, libraries and technologies that implement those specifications or provide other XML utilities.  Want a pretty printer?  There's a tool for that (indeed you're probably using one right now).  Want an API for processing arbitrary XML?  There's several, in nearly any language you can name.  Want portable validation?  Want to combine dialects?  Want to translate one schema to another?  Want simple macro support?  Want to embed or link sub-documents?  Want to generate hyperlinked documentation for a script or it's syntax?  There's a tool for that too.
</p><p>
Sometimes it's sufficient to be adequate and popular, when that means a strong tool chain comes along for the ride.  Sometimes <a href="http://www.ai.mit.edu/docs/articles/good-news/good-news.html" title="Richard P. Gabriel: Lisp: Good News, Bad News, How to Win Big">worse really is better</a>, or at least good enough.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/08.html#a77" title="item permalink">posted&nbsp;11:38:26 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (77)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (77)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77">(link)</a>
</div>
  <p></p>


< Friday, 8 August 2003 >

In Defense of XML <sup><a href="http://radio.weblogs.com/0122027/2003/08/08.html#a77" title="item permalink">#</a></sup>


  <p>
Recently I've read a number of comments (some <a href="http://www.toolshed.com/blog/News/LastArtima.html,v" title="/\ndy's Weblog: Forensic Analysis and Plain Text">old</a> and some <a href="http://www.freeroller.net/page/fate/20030801#as_stable_and_maintanable_as" title="Bile Blog: As stable and maintainable as jelly">new</a>) that take issue with the use of XML for one purpose or another (in the above examples, Ant and Jelly scripts, respectively).  In fact, it seems all the cool kids are <a href="http://www.google.com/search?q=xml+sucks" title="Google on &quot;xml sucks&quot;">XML detractors</a> these days, although the coolness may have peaked a few months ago, when even Tim Bray was <a href="http://www.tbray.org/ongoing/When/200x/2003/03/16/XML-Prog" title="ongoing: XML Is Too Hard For Programmers">admitting</a> that XML may not be as nifty as first thought.
</p><p>
Now, I'll certainly admit that XML has its drawbacks.  Is it overly verbose?  Often.  <a href="http://okmij.org/ftp/Scheme/xml.html#SXML-spec" title="XML and Scheme: SXML specification">An equivalent s-expression syntax</a> would be more concise and (for Lisp developers at least) more useful.  Is it hard to read? At times.  It's certainly better suited for documents where the ratio of text to tags is high.  Is XML often used for developer convenience at the expense of user convenience? Is there information that has no business being in an XML format, but that developers or vendors insist on making XML anyway? Yes, yes, of course.
</p><p>
(On a related note, if "executable XML" is such a bad idea, how does one explain the longevity of Lisp?)
</p><p>
Despite these limitations, there is some value in selecting XML over, say (as Andy Hunt suggested for Ant) some arbitrary context-free grammar.
</p><p>
Part of this value is the ease with which a developer can drop in an XML parser, but that's only an indirect source of value.  Part of this value is the comfort that users familiar with popular SGML applications (read "HTML") have with the angle bracket notation, but that may only explain the quick adoption.
</p><p>
The real value of XML is in the tool chain.
</p><p>
Suppose Ant had been based upon some custom, non-XML grammar.  What would we lose?
</p><p>
Well for one, nearly every programmer's editor has a syntax coloring, well-formedness-checking mode for XML (certainly emacs and vi, or at least vim, and nearly anything that calls itself an IDE).  Moreover, many editors support DTD or Schema validation as well, perhaps even tag and attribute completion.  Using an XML format means a host of editors can handle Ant scripts smartly.  The same would probably not have been true, at least initially, with some arbitrary grammar.
</p><p>
How does this come about?  Well in part because XML is a popular format, but also because of the ease with which a developer can drop in an XML parser and other libraries.
</p><p>
For another advantage, consider <a href="http://www.wdvl.com/Authoring/Languages/XML/XMLFamily/BigPicture/bigpix20a.html" title="Big Picture of the XML Family of Specifications">the plethora of XML-based or XML-extending specifications</a>.  Many commentators have looked at that dense diagram and scoffed: not everything is well suited for an XML representation.  Yet few would deny that at least some of those technologies do something truly useful.
</p><p>
Similarly, consider the number of tools, libraries and technologies that implement those specifications or provide other XML utilities.  Want a pretty printer?  There's a tool for that (indeed you're probably using one right now).  Want an API for processing arbitrary XML?  There's several, in nearly any language you can name.  Want portable validation?  Want to combine dialects?  Want to translate one schema to another?  Want simple macro support?  Want to embed or link sub-documents?  Want to generate hyperlinked documentation for a script or it's syntax?  There's a tool for that too.
</p><p>
Sometimes it's sufficient to be adequate and popular, when that means a strong tool chain comes along for the ride.  Sometimes <a href="http://www.ai.mit.edu/docs/articles/good-news/good-news.html" title="Richard P. Gabriel: Lisp: Good News, Bad News, How to Win Big">worse really is better</a>, or at least good enough.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/08/08.html#a77" title="item permalink">posted&nbsp;11:38:26 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (77)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (77)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=77&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F08%2F08.html%23a77">(link)</a>
</div>
  <p></p>


< Wednesday, 30 July 2003 >

The Silent Majority Pays for Open Source <sup><a href="http://radio.weblogs.com/0122027/2003/07/30.html#a69" title="item permalink">#</a></sup>


  <p>
When you think of a writer, you probably imagine a book author, a journalist, an essayist, or even a script writer of some sort, but it's generally someone who makes a living selling their words.  But the majority of text isn't produced for direct or even indirect sale: it's used to remind your spouse to pick up a gallon of milk at the store, or to thank Aunt Rita for that lovely sweater, or to point your friend to that really funny website you saw this morning.  Even the majority of text someone gets paid to write isn't written for sale: it's in business correspondence, or restaurant menus, or on mortgage applications, or bus schedules, or in instruction manuals, or on the back of cereal boxes.  Practically everywhere you look you can find the written word.  Someone was paid to write much of it, and yet hardly ever are you buying the words themselves.
</p><p>
Most of the time text isn't the end product, it's a tool for communication.  Lots of folks are paid to write something, very few of them view the text itself as the product.  It's a means to an end.
</p><p>
Yesterday Alan Williamson asked <a href="http://alan.blog-city.com/read/158430.htm" title="Who Pays for Open-Source?">"Who pays for open source?"</a> and answered his own question with "The great belief, as sung by pretty much all companies involved in open source, is 'we charge for support'."
</p><p>
Andy Oliver <a href="http://linuxintegrators.com/hl30/blog/general/?permalink=Alan+Williamson+and+the+Forms+of+open+source.html" title="Alan Williamson and the Forms of open source">suggests</a> this is but one open source business model, but goes on to define four "forms" that all pretty much come down to "we charge for support".
</p><p>
I think <a href="http://www.livejournal.com/users/stevenberkowitz/" title="Steven's LJ">Steven Berkowitz</a>, in a comment to Alan's post, gets much closer to the truth: "Open source projects that somehow make money for someone, be it through support, consulting, etc., are the exceptions."  I'll take that comment one step further: Modulo outsourcing, software projects that directly make money for someone, be it through sales, support, etc., are the exceptions.
</p><p>
I'm going to make an assumption here, but I think it's an assumption I can safely make.  The majority of software developers aren't selling software, or even software support and services.
</p><p>
Living as I do, in Chicago, where I'm <a href="http://www.bls.gov/" title="U.S. Department of Labor: Bureau of Labor Statistics">told</a> both the per capita and absolute number of software developers is higher than the Silicon Valley, I think this observation is a bit more obvious.  I know a lot of software developers, but practically none of them build software for direct sale to consumers or businesses.  When a "software development" firm is hired, it's often for custom (or at least customized) development.  Even when we sell shrink-wrapped software, <a href="http://store.britannica.com/escalate/store/CategoryPage?pls=britannica&amp;bc=britannica&amp;cc=videos_software" title="Britannica Store: Software">as my company does</a>, it's not the software that customers are really buying.
</p><p>
For most companies and for most developers, software isn't a business, it's a tool for getting the real work done.
</p><p>
In this scenario, it's easy to see why a company might use open source software: just find me the best tool for the job.  It's also easy to see why a company might allow its IT staff (internal or outsourced) to contribute to open source development.  Critical as it might be, and as disastrous as it can be when it fails, few companies rely upon software for their competitive advantage.  I don't care if my competitors use the same web or database server that I do, or for that matter the same XML parser, caching engine, unit testing framework, or database connection pool that I do.  Indeed there is some advantage to me if the non-proprietary parts of my infrastructure become commodities.
</p><p>
While the public face of open source software might be the folks that are trying to build a business around it, I suspect that's because, well, they're selling something.  Who pays for open source development?  My guess is that the answer is the same as it is for most software development: the folks who are trying to get something else done.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/30.html#a69" title="item permalink">posted&nbsp;12:18:19 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=69&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F30.html%23a69" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (69)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=69&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F30.html%23a69">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=69&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F30.html%23a69" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (69)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=69&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F30.html%23a69">(link)</a>
</div>
  <p></p>


< Tuesday, 29 July 2003 >

Wanted: GUI Wrapper for Text-Based Java Applications <sup><a href="http://radio.weblogs.com/0122027/2003/07/29.html#a67" title="item permalink">#</a></sup>


  <p>
I've got a simple console-based (i.e.,  text interface) Java application that I'd like to expose via Java Web Start or as an Applet.  I can't, however, because System.in and System.out aren't attached to anything useful, so my application runs invisibly and can't collect any input.
</p><p>
What I need is a simple wrapper application that creates a basic text i/o frame that looks like stdin/stdout to my application's main method.  (Or, failing that, to a custom <nobr><code>main(String[] args, InputStream stdin, PrintStream stdout, PrintStream stderr)</code></nobr> method.)  More elaborate interfaces, such as color coded output, distinct stdout and stderr frames, spool to file, etc., are easily imagined.
</p><p>
I believe such an application would have fairly broad utility.  A web search finds quite a few elaborate telnet/ssh oriented terminal emulators, which one might be able to pare down to what I'm looking for, but it seems like someone would have already tackled this problem.  Lazy web to the rescue?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/29.html#a67" title="item permalink">posted&nbsp;6:10:38 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=67&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F29.html%23a67" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (67)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=67&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F29.html%23a67">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=67&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F29.html%23a67" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (67)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=67&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F29.html%23a67">(link)</a>
</div>
  <p></p>


< Thursday, 24 July 2003 >

A is for Axion ... Z is for Zaurus <sup><a href="http://radio.weblogs.com/0122027/2003/07/24.html#a64" title="item permalink">#</a></sup>


  <p>
I've got <a href="http://axion.tigris.org/" title="Axion Java Relational Database">Axion</a> up and running on my <a href="http://www.zaurus.com/" title="Zaurus.com: Sharp's Zaurus site">Zaurus</a>.
</p><p>
If you'd like to do the same, here's how:
</p><ul>
<li><p>Obtain a build of the Axion HEAD (1.0M3-dev).  See the <a href="http://axion.tigris.org/building.html" title="Building Axion">instructions on building Axion</a> for details.</p></li>
<li><p>Obtain binaries of Axion's runtime dependencies, namely <a href="http://jakarta.apache.org/commons/collections/" title="Jakarta Commons Collections">Jakarta Commons Collections</a> (currently a <a href="http://jakarta.apache.org/builds/jakarta-commons/nightly/commons-collections/" title="Commons-Collections nightlies">nightly</a> build is required) and <a href="http://jakarta.apache.org/commons/logging/" title="Jakarta Commons Logging">Jakarta Commons Logging</a> (you'll want release 1.0.3, earlier versions don't work on the Jeode VM).</p>
<p>If you want to use the LIKE operator, you'll also need <a href="http://jakarta.apache.org/regexp/" title="Jakarta Regexp">Jakarta Regexp</a>.</p>
<p>If you want to use the BASE64ENCODE or BASE64DECODE functions, you'll also need <a href="http://jakarta.apache.org/commons/codec" title="Jakarta Commons Codec">Jakarta Commons Codec</a>.</p></li>
<li>Ensure that you have the java.util Collections and java.sql JDBC packages available on your platform.  Since the Insignia Jeode VM installed on the Zaurus by default is JDK 1.1 based, I had to copy over the JDK Collections manually.  I had thought the Collections package was available as a standalone JAR to drop in to JDK 1.1 environments but as I was unable to find it.  I just copied over the rt.jar from a JDK 1.3 installation, but I think the java.util package would suffice.</li>
<li><p>Obtain a copy of axiondb.properties.  You can pull this out of the Axion JAR or from <a href="http://axion.tigris.org/source/browse/axion/conf/axiondb.properties" title="axion/conf/axiondb.properties">CVS</a>.  Normally Axion loads this file out of the JAR automatically, but the Jeode VM seems to always return null for getClassLoader so we had to add a mechanism for specifying the configuration as an external file.</p></li>
<li><p>Now simply copy those files over to the Zaurus, add the JARs to your classpath, and you are ready to go.  For example to run the Axion console I use:</p>
<pre>evm
 -Dorg.axiondb.engine.BaseDatabase.properties=axiondb.properties
 -classpath axion-1.0-M3-dev.jar:
            commons-collections.jar:
            commons-logging.jar:
            commons-codec.jar:
            regexp.jar:
            rt.jar
 org.axiondb.tools.Console $1 $2</pre>
</li>
</ul><p>
Similar steps should get Axion up and running on other micro or J2ME platforms or for that matter, other JDK 1.1 environments.
If the console is any indication, Axion seems to run rather well on the Zaurus (even running off a compact flash card rather than the RAM disk).
</p><p>
If folks were interested, it wouldn't be difficult to create an IPK installer for Axion, although my interest here, and others as well I imagine, is in using Axion within other apps on the Zaurus, rather than playing with Axion via the console.
</p><p>
If you're curious, I did have to make a few minor changes to Axion to get it run on the Jeode/JDK 1.1 VM.  Here's a brief list of what I had to change:
</p><ul>
<li><p>The Jeode VM always seems to return null for getClassLoader (rather than throwing a security exception), so I had to add checks for null, and provide an alternative mechanism for loading the properties file.</p></li>
<li><p>We had used File.createNewFile in several places, which is a JDK 1.2 method.  These calls turned out to be unnecessary anyway, so I simply removed them.</p></li>
<li><p>Although it's easy to add java.util.Comparable and java.util.Comparator to the classpath, none of the core objects (Number, String, etc.) actually implement Comparable in JDK 1.1, so I had to add custom Comparators replacing ComparableComparator for those DataTypes.</p></li>
<li><p>For reasons I don't understand, in several places where we had an hierarchy like this:</p>
<pre>interface Foo {
  void someMethod();
}
&nbsp;
abstract class AbstractBar implements Foo {
  void anotherMethod() {
    doSomething();
  }
}
&nbsp;
class Bar extends AbstractBar {
  void someMethod() {
    doSomethingElse();
  }
}</pre>
<p>I had to declare the interface methods in the abstract class:</p>
<pre>abstract class AbstractBar implements Foo {
  <b>abstract void someMethod();</b>
&nbsp;
  void anotherMethod() {
    doSomething();
  }
}</pre><p>
to make various AbstractMethodErrors go away.
</p></li>
</ul><p>
These changes have already been checked into the HEAD version of Axion, and should be part of the Milestone 3 release.
</p><p>
There are few Axion-based apps I've been thinking of tinkering with on my Zaurus, some for personal use, others for my day job.  That may shake out a few issues I haven't yet encountered, but so far I've got feature I've tried working without too much trouble.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/24.html#a64" title="item permalink">posted&nbsp;12:11:39 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=64&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F24.html%23a64" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (64)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=64&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F24.html%23a64">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=64&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F24.html%23a64" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (64)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=64&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F24.html%23a64">(link)</a>
</div>
  <p></p>


< Wednesday, 23 July 2003 >

The Great Wall of China <sup><a href="http://radio.weblogs.com/0122027/2003/07/23.html#a63" title="item permalink">#</a></sup>


  <p>
Although I'm neither old enough nor wise enough to pull it off effectively, I'm a fan of management by narrative: using a brief story or parable to illustrate a point.  Often I find it is sufficient to present the narrative without explicitly connecting the dots--I'll just tell the story and then launch into what I was otherwise going to say.  (As always, you need to understand your audience to use this approach effectively.  I've noticed developers often respond well to leading with the narrative.  Suits, whether management, business or marketing folks, often respond best to hearing the explanation and then the metaphor.)
</p><p>
Yesterday, in the context of the early stages of a fairly large scale development project, I had the opportunity to tell the following.
</p>
<blockquote>
<p>
When the emperor decided to build the 10,000 Li Wall, he didn't amass an army of men to start at one end and build to the other.  Nor did they start at both ends and build toward the middle, the way one might dig a long tunnel.  Rather, they assembled small teams of men and spread them far and wide.  Each crew was responsible for constructing a small section of the wall, separated by many li from the neighboring sections.
</p><p>
Like all ancient construction, the work was difficult, and by the time the section was complete the crew was greatly discouraged.  They had worked so hard, and seemed to have little to show for it but a single, isolated tower.
</p><p>
Yet as the crew made the long journey back to their homes, they would come across other sections of the wall--some complete, others being busily attended to by other work crews.  They came to discover that the wall stretched, section by section, from the Yellow Sea deep into the western desert.  They arrived home in awe of the enormity of what had already been accomplished, and more inspired than ever to complete the construction.
</p>
</blockquote>
<p>
I have no idea if this story is true (never let the facts stand in the way of a good story), my source is a half-remembered parable written by Franz Kafka.  In my limited understanding of Chinese history, the story is a half-truth: the Great Wall was assembled a bit more organically out of a series of smaller fortifications.
</p><p>
I was a little hesitant to tell this story as I think the metaphor can be easily misinterpreted.  I'm not suggesting that large scale systems be built by teams with only local knowledge of the overall system.  Nor am I suggesting that if "isolated towers" aren't useful to you (or your customer) that this approach is a good one.  (This latter case is an example of where the reality makes a better metaphor than the story.  In practice Shih huang-ti connected a number of existing, independently useful fortifications to form the Great Wall.)  In fact, I think laying out a grand vision of the project and working on little bits here and there is a remarkably bad way to approach the development unless those little bits are useful to you in isolation.  Otherwise you're likely to end up with bits that aren't useful to you at all.  But with a little bit of discipline about which "towers" to build first, I think this serves as a useful metaphor for an effective (and not uncommon) development practice.  We're implementing a large and complex system via a series of user stories.  Rather than building out a major subsystem in its entirety and then moving on to the next one, we're implementing the skeleton of the end-to-end system, to which we will add meat (that is, complexity) in subsequent iterations.  We know any given story describes an incomplete subsystem at this stage, but each describes an cohesive unit of functionality, to which we can add complexity and functionality to fill out the walls between the towers.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/23.html#a63" title="item permalink">posted&nbsp;12:25:07 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=63&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F23.html%23a63" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (63)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=63&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F23.html%23a63">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=63&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F23.html%23a63" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (63)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=63&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F23.html%23a63">(link)</a>
</div>
  <p></p>


< Tuesday, 22 July 2003 >

Where are you all coming from? <sup><a href="http://radio.weblogs.com/0122027/2003/07/22.html#a61" title="item permalink">#</a></sup>


  <p>
An unusually large number of my visitors today seem to be <a href="http://radio.xmlstoragesystem.com/rcsPublic/referers?site=0122027&amp;group=radio1" title="Referer rankings for Rod Waldhoff's Weblog">referred by</a> various email clients.  This and the number of direct hits (non-browser email clients?) are generating enough traffic to push this blog higher than usual in <a href="http://www.weblogs.com/rankingsByPageReads.html" title="UserLand Site Report: Rankings by Page Reads">UserLand's rankings of Radio sites</a>.
</p><p>
On other occasions the source of this sort of jump in traffic is <a href="http://developers.slashdot.org/article.pl?sid=03/07/17/2257224" title="Slashdot.org: LGPL is Viral for Java">obvious</a>.  This time I can only assume a link went out on some mailing list, seemingly to <a href="http://radio.weblogs.com/0122027/2003/07/15.html" title="15 July 2003: my pet bug, or another example of how sun doesn't get community development">an older post</a>, but my ears are burning with curiosity.  Will someone post a comment indicating what list, if any, contained the link?
</p>
<p>UPDATE: JavaBlogs sucks.  This post isn't in either of my <a href="http://radio.weblogs.com/0122027/categories/java/rss.xml">java</a> or <a href="http://radio.weblogs.com/0122027/categories/tech/rss.xml">tech</a> feeds, and hence shouldn't have been picked up by the aggregator, but <a href="http://www.javablogs.com/ViewEntry.jspa?id=42640">there it is</a>.  Someone please tell me how to get JavaBlogs to pay attention to the proper feed. (Cf. <a href="http://radio.weblogs.com/0122027/2003/04/16.html#a23" title="Ignore this post (Demonstrates javablogs bug?)">a previous post</a>.)
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/22.html#a61" title="item permalink">posted&nbsp;11:02:16 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=61&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F22.html%23a61" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (61)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=61&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F22.html%23a61">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=61&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F22.html%23a61" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (61)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=61&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F22.html%23a61">(link)</a>
</div>
  <p></p>


< Monday, 21 July 2003 >

Curly braces, Pipes, Escape and other characters on the Zaurus <sup><a href="http://radio.weblogs.com/0122027/2003/07/21.html#a59" title="item permalink">#</a></sup>


  <p>
If you've ever tried to type code, pseudo-code or shell scripts on the Sharp <a href="http://www.zaurus.com/" title="Zaurus.com: Sharp's Zaurus site">Zaurus</a>, you may have noticed that the little slide-out keyboard is missing some useful keys.  If you've done much typing with this thumb-keyboard, you may have noticed that when you fat-finger a couple of keys, you can get some of those extra characters.  For my reference as much as yours, here's a short list:
</p>
<table border="1" cellpadding="2" cellspacing="0">
<tbody><tr>
 <th>keys</th>
 <th>character</th>
 <th>unicode value</th>
 <th>name</th>
</tr>
<tr>
 <td>[Fn]+z</td>
 <td>&nbsp;</td>
 <td>0x005A(?)</td>
 <td>undo</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+c</td>
 <td>€</td>
 <td>0x20AC</td>
 <td>euro symbol</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+[Backspace]</td>
 <td>[</td>
 <td>0x005B</td>
 <td>left square bracket</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+,</td>
 <td>]</td>
 <td>0x005D</td>
 <td>right square bracket</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+.</td>
 <td>{</td>
 <td>0x007B</td>
 <td>left curly brace</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+[Enter]</td>
 <td>}</td>
 <td>0x007D</td>
 <td>right curly brace</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+'</td>
 <td>^</td>
 <td>0x005E</td>
 <td>caret/circumflex</td>
</tr>
<tr>
 <td>[Fn]+[Shift]+[Space]</td>
 <td>`</td>
 <td>0x0060</td>
 <td>tick/backquote</td>
</tr>
<tr>
 <td>[Shift]+[Space]</td>
 <td>|</td>
 <td>0x007C</td>
 <td>pipe</td>
</tr>
<tr>
 <td>[Shift]+[Tab]</td>
 <td>\</td>
 <td>0x005C</td>
 <td>backslash (note that this is listed incorrectly in the sharp doc)</td>
</tr>
</tbody></table>
<p>
In the table above, "[Fn]" means the purple "function" key, "[Shift]" means the arrow-up "shift" key, "[Backspace] means the white back-arrow/delete key, "[Enter]" means the purple "return" key, "[Space]" means the space bar, "[Tab]" means the purple tab key, and a "+" means hit these keys in combination, typically by holding down the "meta" keys first.
</p><p>
Also notice that the "Cancel" button works like "Escape", which makes VI usable without resorting to the on-screen (virtual) keyboard.
</p><p>
There's <a href="http://www.zaurus.com/dev/support/downloads/sl5600_keycode_v091.pdf" title="Keycode for Java/Qtopia Applications">a full keycode mapping table</a> available on Sharp's site.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/21.html#a59" title="item permalink">posted&nbsp;12:56:30 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=59&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F21.html%23a59" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (59)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=59&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F21.html%23a59">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=59&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F21.html%23a59" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (59)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=59&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F21.html%23a59">(link)</a>
</div>
  <p></p>


< Friday, 18 July 2003 >

LGPL and Java: More confused than ever <sup><a href="http://radio.weblogs.com/0122027/2003/07/18.html#a57" title="item permalink">#</a></sup>


  <p>
After <a href="http://linuxintegrators.com/hl30/blog/technology/?permalink=LGPL+in+Java.html&amp;page=comments" title="comments on Andy's 'LGPL in Java'">reading</a> <a href="http://www.rollerweblogger.org/comments/roller/Weblog/for_java_lgpl_is_viral" title="comments on Dave's 'For Java, LGPL is viral.'">the</a> <a href="http://www.intertwingly.net/blog/1519.html" title="comments on Sam's 'Two paths'">various</a> <a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=56" title="comments on Rod's 'The [L]GPL, Java and Asymmetry'">comment</a> <a href="http://developers.slashdot.org/developers/03/07/17/2257224.shtml" title="comments on Slashdot's 'LGPL is Viral for Java'">threads</a>, and seeing Andy and David's exchange in <a href="http://superlinksoftware.com/text/lgpl.txt">a bit more context</a>, I'm more confused than ever.
</p><p>
As quoted by Andy, Roy wrote:
</p>
<blockquote>What the FSF needs to say is that inclusion of the external interface names (methods, filenames, imports, etc. defined by an LGPL jar file, so that a non-LGPL jar can make calls to the LGPL jar's implementation, does not cause the including work to be derived from the LGPL work even though java uses late-binding by name (requiring that names be copied into the derived executable), and thus does not (in and of itself) cause the package as a whole to be restricted to distribution as (L)GPL or as open source per section 6 of the LGPL.</blockquote>
<p>
and Andy asked:
</p>
<blockquote>Is this statement true with regards to the use of LGPL Java libraries by non-LGPL Java libraries?</blockquote>
<p>
To which David replied:
</p>
<blockquote>If I understand the statement correctly, yes -- that's exactly what section 6 is for.</blockquote>
<p>
Seen in context, my reading is that LGPL does not infect Java code that simply references, invokes methods of, or extends an LGPL'ed class.  Brad Kuhn's comments mentioned in the slashdot "update" seem to be reiterating that position.  I see this as saying all of my <a href="http://radio.weblogs.com/0122027/2003/04/07.html#a12" title="7 April 2003: A Question on Applying the LGPL to Java">examples</a> are not infectious.  Joe's <a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=12" title="comments on 'A Question on Applying the LGPL to Java'">comments</a> on that post focus on the word "distribute" in what may be a clarifying way (i.e., the in-memory, late-bound version of code that combines LGPL and non-LGPL code is not distributed, it is assembled at runtime, and therefore not in violation).
</p><p>
I hesitate to ask but the question seems inevitable: what does it mean to apply aspects to LGPL'ed code?  If I hook in code to a cut-point in some LGPL'ed code, is my cut-point code infected?  Does it matter if my AOP-system is implemented with byte-code manipulation, reflection or composition?  Does it matter if this happens at runtime or at compile time?  It seems that it would, and that feels like a fairly arbitrary distinction in some ways.
</p><p>
IANAL and this makes my head spin.  I'm going back to writing code.  Someone let me know when there's a clear answer here.  (Unfortunately I think it may take a court to decide that.  Let's hope it never comes to that.)
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/18.html#a57" title="item permalink">posted&nbsp;11:35:52 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=57&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F18.html%23a57" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (57)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=57&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F18.html%23a57">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=57&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F18.html%23a57" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (57)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=57&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F18.html%23a57">(link)</a>
</div>
  <p></p>


< Wednesday, 16 July 2003 >

The [L]GPL, Java and Asymmetry <sup><a href="http://radio.weblogs.com/0122027/2003/07/16.html#a56" title="item permalink">#</a></sup>


  <p>
<a href="http://linuxintegrators.com/hl30/blog/" title="Andy Oliver's Blog">Andy</a> has finally <a href="http://article.gmane.org/gmane.comp.jakarta.poi.devel/5900" title="poi-dev@jakarta.apache.org: Re: [Followup] RE: Possibly Include HTMLParser Jar in contribcode?">tracked down</a> some answers on <a href="http://linuxintegrators.com/hl30/blog/technology/?permalink=LGPL+in+Java.html" title="LGPL in Java">applying the LGPL to Java</a>.  <a href="http://www.rollerweblogger.org/page/roller/20030716#for_java_lgpl_is_viral" title="For Java, LGPL is viral">Dave</a> and <a href="http://www.intertwingly.net/blog/1519.html" title="Two paths">Sam</a> had some additional comments.
</p><p>
A few points:
</p>
<ol>
<li><p>In his <a href="http://www.rollerweblogger.org/comments/roller/Weblog/for_java_lgpl_is_viral" title="Comments on For Java, LGPL is viral">comment thread</a> Dave suggests that "Class.forName() might also be a workaround", echoing <a href="http://radio.weblogs.com/0122027/2003/04/07.html#a12" title="7 April 2003: A Question on Applying the LGPL to Java">questions on the LGPL in Java I previously mentioned</a>.  The answers to those questions still aren't entirely clear to me, although the position of simply steering clear of LGPL/GPL code for Java is seems increasingly rational.</p></li>
<li><p>Sam writes "An example of something that does solve the issue: JDBC" but I'm not sure I follow.  Does this mean Class.forName?  In other words, I can use a LGPL'd database code as long as I never directly invoke the LGPL code?</p></li>
<li><p>Andy writes "Thus we need a license for Java that guarantees contributors will donate back to the library that does not infect the outside code."</p>
<p>Do we?  Why?  I think there is sufficient incentive to release most derivative works anyway, and if someone doesn't, who cares?  The open source project still gets more users, more support, more field testing, mo' better, than it otherwise would.  If you make a few bucks selling proprietary extensions to my open source code, more power to you.  (You run the threat, of course, of the community re-implementing your proprietary extensions in an open source fashion, thus destroying your business model.  This disincentive to selling proprietary derivatives augments the incentives for releasing those derivatives to the community for further extension, testing, maintenance and support.)</p></li>
</ol>
<p>
A big issue I have with the [L]GPL is the asymmetry of the license.  If Company X releases code under the [L]GPL, I'm less troubled by the need to similarly open my derivative works (although the people who sign my paycheck quite reasonably have a different perspective on that--there is some work that is best kept proprietary, if only because it pays the bills) than by the fact that Company X, typically acting as the "umbrella" copyright holder (to both their original work and my contributions) now has more rights to my contributions than I do.  Under the viral GPL, I <i>cannot</i> use the larger work under any terms but those provided by the GPL, and in isolation my contributions are probably pretty much useless.  Yet Company X (as the holder of the collective copyright) is free to take my (donated) work and theirs and release (or sell) it under whatever terms they choose.  I wonder if Stallman had foreseen this consequence when constructing the GPL.
</p><p>
The "umbrella" copyright holder on a BSD- or ASF-type license has the same rights of course, but the license grants me the ability to do pretty much whatever I want with the larger work, short of claiming it all to be my own.  There is very little that the copyright holder can do that I, as a user let alone contributor, cannot also do.  It seems to me that the license with the least restrictive terms is the one that is most "free".
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/16.html#a56" title="item permalink">posted&nbsp;11:35:04 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=56&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F16.html%23a56" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (56)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=56&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F16.html%23a56">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=56&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F16.html%23a56" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (56)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=56&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F16.html%23a56">(link)</a>
</div>
  <p></p>


< Tuesday, 15 July 2003 >

my pet bug, or another example of how sun doesn't get community development <sup><a href="http://radio.weblogs.com/0122027/2003/07/15.html#a54" title="item permalink">#</a></sup>


  <p>
I've submitted <a href="http://developer.java.sun.com/developer/bugParade/bugs/4292531.html" title="Bug Id 4292531: RFE: Undeprecate java.util.Date(String)">a</a> <a href="http://developer.java.sun.com/developer/bugParade/bugs/4354100.html" title="Bug Id 4354100: Repackage sun.net.www.content.* Classes (java.net.ContentHandler)">few</a>
insignificant bugs to Sun's <a href="http://developer.java.sun.com/developer/bugParade/" title="Sun's Java Bug Database">Bug Parade</a> over the years, most recently <a href="http://developer.java.sun.com/developer/bugParade/bugs/4890211.html" title="Bug Id 4890211">"Collections.ReverseOrder.equals method is lacking"</a>, which I submitted back in January of 2003 and was finally accepted yesterday (14 July).
</p><p>
This isn't a critical bug, of course: It's easy to work around (that is, replace) and frankly it's been an annoyance but not a real problem in my development efforts.  Moreover, it seems like Sun has been pretty busy over the last few months working on <a href="http://java.net/" title="java.net">other things</a>.  Nevertheless, this whole experience has been frustrating.
</p><p>
First, in my limited and anecdotal experience the time to respond to bug reports is getting much worse.  It took six months for the Java team to acknowledge this simple, and if I may say reasonably well documented (including a "patch" and unit test), bug.
</p><p>
Second, this is a good if trivial example of how Sun's community efforts fail in execution.  Here's a trivially simple (it's clear from inspection alone) and readily demonstrated (a complete unit test is provided) defect.  A trivially simple (one line, two if you add hashCode()) patch is provided, and yet it took six months to get the issue acknowledged.  Now I'll wait an indeterminate amount of time to see the problem fixed.  All that and this problem could have been analyzed, patched and regression tested in less time than it took me to write this post.  Even the slowest moving of open source projects would have had this problem patched, if not released, in a matter of weeks.  If Sun can't find a way to move more quickly (and <a href="http://jcp.org/en/jsr/detail?id=176" title="JSR 176: J2SE 1.5 (Tiger) Release Contents">stop chasing the most superficial features of C#</a>) Java seems destined to be eclipsed by community developed languages.
</p><p>
I'll uncharacteristically paraphrase Jerry Seinfeld here: "Sun knows how to take community input, they just don't know what to do with it.  And that's really the most important part of community: the doing." (<a href="http://tomsquotes.amhosting.net/sitcom/seinfeld/jerry/jerry2.htm">text</a>, <a href="http://tomsquotes.amhosting.net/sitcom/seinfeld/jerry/reserve.wav" title=".wav file">audio</a>)
</p>
<p>
PS: Also note that the second bug I linked to above, <a href="http://developer.java.sun.com/developer/bugParade/bugs/4354100.html" title="Bug Id 4354100">"Repackage sun.net.www.content.* Classes (java.net.ContentHandler)"</a>, was already addressed by the time I submitted it, I personally added a comment to this effect nearly two years ago, and yet the bug sits marked "In progress" (and with 3 votes, none of them mine).
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/15.html#a54" title="item permalink">posted&nbsp;2:02:07 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=54&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F15.html%23a54" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (54)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=54&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F15.html%23a54">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=54&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F15.html%23a54" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (54)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=54&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F15.html%23a54">(link)</a>
</div>
  <p></p>


< Monday, 14 July 2003 >

Given enough eyeballs, are all trends shallow? <sup><a href="http://radio.weblogs.com/0122027/2003/07/14.html#a53" title="item permalink">#</a></sup>


  <p>
As part of some internal strategic planning, I recently found myself constructing various "scenarios" (in the <a href="http://www.google.com/search?q=scenario+planning" title="Google Search on &quot;scenario planning&quot;">scenario planning</a> sense) that try to address the next 2 to 5 years of development in the areas of mainstream language development, "enterprise" application platforms, etc.
</p><p>
It occurs to me that (a) very little of this analysis is proprietary, either in the sense of "containing trade secrets" nor in the sense of "unique to the organization that created it"; (b) this analysis would be more insightful and likely more accurate when developed by a larger group; and (c) this sort of information would be a valuable community resource.
</p><p>
I wonder if it is possible to grow a body of "open", community developed scenario documents, initially focused on technical topics, to be used by individuals, corporations, and even open source projects for strategic planning.  How would one organize this information? In what format would these documents be developed? (A Wiki?)  What license would be appropriate? (<a href="http://www.creativecommons.org/" title="creativecommons.org">creative commons</a>?)  Does such an initiative already exist?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/14.html#a53" title="item permalink">posted&nbsp;4:22:30 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=53&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F14.html%23a53" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (53)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=53&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F14.html%23a53">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=53&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F14.html%23a53" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (53)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=53&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F14.html%23a53">(link)</a>
</div>
  <p></p>


< Friday, 11 July 2003 >

Axion 1.0 Milestone 2 Released <sup><a href="http://radio.weblogs.com/0122027/2003/07/11.html#a50" title="item permalink">#</a></sup>


  <p>
It seems Friday is a <a href="http://www.zonic-temple.org/zonic-temple/Main/blog/permalink?fn=perpojo_release" title="Today is release day for PerPOJO">good</a> <a href="http://blogs.werken.com/people/bob/archives/000218.html" title="drools 2.0-beta-11">day</a> for <a href="http://blogs.codehaus.org/projects/aspectwerkz/archives/000097.html" title="AspectWerkz 0.7.2 is released">releases</a>:
</p><p>
<a href="http://axion.tigris.org/index.html" title="Axion: Java RDBMS">Axion</a> has released their <a href="http://axion.tigris.org/releases/1.0M2/index.html" title="Axion: Releases: 1.0 Milestone 2">third binary distribution</a>, just one year after their first release, and only three months since <a href="http://radio.weblogs.com/0122027/2003/03/29.html#a4" title="29 March 2003: Axion 1.0 Milestone 1 Released">their previous one</a>.
</p><p>
This release adds <a href="http://axion.tigris.org/releases/1.0M2/release-notes.html" title="Axion: Releases: 1.0 Milestone 2: Release Notes">several new features</a>, including the DML and BTree performance tuning I <a href="http://radio.weblogs.com/0122027/2003/05/05.html#a29" title="5 May 2003: The Pleasures of Profiling">previously described</a>, as well as support for OUTER JOINs, LIKE clauses and JDBC 3.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/11.html#a50" title="item permalink">posted&nbsp;4:24:45 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=50&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F11.html%23a50" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (50)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=50&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F11.html%23a50">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=50&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F11.html%23a50" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (50)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=50&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F11.html%23a50">(link)</a>
</div>
  <p></p>


< Wednesday, 9 July 2003 >

Do you have a intranet portal? <sup><a href="http://radio.weblogs.com/0122027/2003/07/09.html#a48" title="item permalink">#</a></sup>

<p>
I'll show you <a href="http://radio.weblogs.com/0122027/images/sysarch_1000x746.png" title="screenshot">mine</a> if you show me yours.
</p><p>
<a href="http://radio.weblogs.com/0122027/images/sysarch_1000x746.png" title="full size screenshot"><img src="http://radio.weblogs.com/0122027/images/sysarch_1000x746.png" width="333" height="249" align="right" alt="screenshot"></a>
</p><p>
For the curious, here's where those links go:
</p>
<dl>
<dt>Links</dt>
<dd>
<dl>
<dt>Iteration Documents</dt>
<dd>index to our current and historical iteration status documents with some summary statistics.</dd>
<dt>Publications</dt>
<dd>various internal whitepapers, HOWTOs, and articles. Most of the interesting content has moved to the wiki we introduced a couple of years ago.</dd>
<dt>Wiki</dt>
<dd>the aforementioned wiki.</dd>
<dt>JavaDocs</dt>
<dd>JavaDoc documentation for our codebase, updated as part of the continuous integration process. The "(more)" link points to a wiki page that links to various external JavaDocs.</dd>
<dt>CVS Tree</dt>
<dd>our <a href="http://viewcvs.sourceforge.net/" title="ViewCVS: browse a CVS repository via a web interface">ViewCVS</a> instance.</dd>
<dt>Build Results</dt>
<dd>our <a href="http://cruisecontrol.sourceforge.net/" title="CruiseControl: a continuous integration service">CruiseControl</a> build servlet.</dd>
<dt>Test Coverage Reports</dt>
<dd>a <a href="http://jcoverage.com/" title="JCoverage: a code coverage analyzer for Java">JCoverage</a> report across our (Java) codebase, updated as part of the continuous integration process.</dd>
<dt>Latka Test Suite</dt>
<dd>a <a href="http://jakarta.apache.org/commons/latka" title="Apache's Jakarta Commons Latka: a functional testing tool for HTTP and more">Latka</a> webapp instance, which allows one to execute our Latka functional test suite against various development, integration, QA and production environments.</dd>
<dt>TrackNet</dt>
<dd>a defect tracking database.</dd>
<dt>Reports</dt>
<dd>web traffic analysis and similar reports.</dd>
<dt>Headlines</dt>
<dd>a simple RSS browsing web application.</dd>
</dl>
</dd>
<dt>Recent Wiki Changes</dt>
<dd>lists the last few changed pages on our internal wiki.</dd>
<dt>SysArch Intranet Traffic</dt>
<dd>web traffic analysis for the portal site itself (just below the fold in the screenshot).</dd>
<dt>Current Build Results</dt>
<dd>a one line summary of our continuous integration build status.</dd>
<dt>Iteration <i>N</i> Status</dt>
<dd>current status of the current and previous development iterations, in summary form.</dd>
</dl>
<p>
This "portal" is largely cobbled together out of server side includes.  It'd be nice to upgrade to a true <a href="http://www.jcp.org/en/jsr/detail?id=168" title="JSR 168: Portlet Specification">portlet</a> implementation, or at least use RSS (or <a href="http://www.intertwingly.net/wiki/pie/EchoProject" title="Sam's Weblog: EchoProject">whatever the "better" RSS is these days</a>).  In fact, I've been looking into introducing a number of blogging inspired ideas.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/09.html#a48" title="item permalink">posted&nbsp;8:38:01 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=48&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F09.html%23a48" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (48)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=48&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F09.html%23a48">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=48&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F09.html%23a48" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (48)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=48&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F09.html%23a48">(link)</a>
</div>
  <p></p>


< Tuesday, 8 July 2003 >

50% of crashes caused by 1% of bugs <sup><a href="http://radio.weblogs.com/0122027/2003/07/08.html#a43" title="item permalink">#</a></sup>


<p>
An interesting statistic: In <a href="http://research.microsoft.com/~toddpro/papers/disruptive.ppt" title="[Powerpoint] Disruptive Programming Language Technologies">Disruptive Programming Language Technologies</a>, Todd Proebsting of the Programming Language Systems group at Microsoft Research notes:
</p>
<blockquote>
Microsoft Watson experience: 50% of crashes caused by 1% of bugs.
<br>
[Slide 17]
</blockquote>
<p>

</p>
<p>
There's some other interesting stuff in that presentation as well.
</p>
<p>
[Via Frank Mitchell's post in the comment thread at <a href="http://www.artima.com/forums/flat.jsp?forum=106&amp;thread=6543" title="Artima.com: Weblogs Forum: Angelika Langer: After Java and C# - what is next?">After Java and C# - what is next?</a>.]
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/08.html#a43" title="item permalink">posted&nbsp;9:07:31 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=43&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F08.html%23a43" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (43)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=43&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F08.html%23a43">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=43&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F08.html%23a43" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (43)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=43&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F08.html%23a43">(link)</a>
</div>
  <p></p>


< Monday, 7 July 2003 >

Wanted: Modular/Extensible Parser Generator <sup><a href="http://radio.weblogs.com/0122027/2003/07/07.html#a41" title="item permalink">#</a></sup>


<p>
Over at the <a href="http://axion.tigris.org/" title="Axion: Open Source Java RDBMS">Axion</a> project, we're using a <a href="http://javacc.dev.java.net/" title="JavaCC:  Java Compiler Compiler">JavaCC</a> <a href="http://axion.tigris.org/source/browse/axion/grammars/AxionSqlParser.jj" title="Axion's AxionSqlParser.jj">grammar</a> to implement the SQL parser.
</p><p>
One of things we've found Axion to be good for is unit testing database applications.  In other words, one can use an in-memory, in-process Axion database as a "mock" replacement for a regular production database.  In this case, it's quite useful to have Axion closely mimic the syntax of other RDBM systems.  For example, Axion supports <code>LIMIT</code> and <code>OFFSET</code> clauses like <a href="http://www.postgresql.com/" title="PostgeSQL open source database">PostgeSQL</a> and <a href="http://www.mysql.com/" title="MySQL open source database">MySQL</a> as well as a <code>ROWNUM</code> pseudo-column like <a href="http://www.oracle.com/" title="Oracle closed source database">Oracle</a>.  Similarly, Axion supports the ISO SQL 99 syntax for outer joins (<code>FROM a LEFT OUTER JOIN b ON a.id = b.id</code>) , but it would be nice to support Oracle's custom syntax (<code>FROM a, b WHERE a.id = b.id(+)</code>) as well.
</p><p>
Supporting the idiosyncrasies of several of the popular database engines in a single grammar file seems cumbersome at best. and probably impossible. It tends to bloat our keyword namespace.  Eventually, it must lead to conflicts.  (For example, if I'm trying to unit test code that eventually interacts with an Oracle database, then the "mock" database shouldn't accept LIMIT and OFFSET clauses, and shouldn't consider those to be keywords either.)
</p><p>
Axion's design is modular enough to allow for pluggable parser implementations.  Indeed, anything that implements:
</p>
<pre>interface Parser {
  AxionCommand parse(String sql) throws AxionException;
}</pre>
<p>

can be dropped right in.  Hence it is straightforward to define, for example, MySqlSyntax.jj, OracleSyntax.jj, SqlServerSyntax.jj, etc. to support a specific SQL dialect.  The trouble is, each of those files is going to be 90% or more the same.  What I'd like is a clean mechanism for either:
</p>
<ul>
<li>declaring SpecializedGrammar to extend from GeneralizedGrammer, perhaps with abstract productions and the like, or</li>
<li>declaring SpecializedGrammar to be the composition of SubGrammarA and SubGrammarB</li>
</ul>
<p>
or both.  I'm especially interested in being able to combine grammars at runtime.  Anyone have any suggestions?  Can you point to an example?
</p>
<p>
(I'll be honest, I'm not much of a *CC expert.  This might be straightforward in JJTree or ANTLR, I just haven't dug into it much.  I'm pretty sure it's not straightforward in plain old JavaCC.)
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/07.html#a41" title="item permalink">posted&nbsp;2:02:31 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=41&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F07.html%23a41" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (41)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=41&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F07.html%23a41">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=41&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F07.html%23a41" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (41)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=41&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F07.html%23a41">(link)</a>
</div>
  <p></p>


< Tuesday, 1 July 2003 >

Re: Test Driven Development versus Component Reuse <sup><a href="http://radio.weblogs.com/0122027/2003/07/01.html#a39" title="item permalink">#</a></sup>


<p>
Over on the <a href="http://www.softwarecraftsmen.com/blog/" title="Software Craftsmen">Software Craftsmen blog</a>, Mike Hogan <a href="http://www.softwarecraftsmen.com/blog/archives/000003.html" title="Test Driven Development versus Component Reuse">asks</a> what is meant by "the simplest thing that could possibly work".  For what it's worth, Beck actually addresses this point directly in <i>Extreme Programming Explained</i> [<a href="http://www.amazon.com/exec/obidos/ASIN/0201616416/rodsradiowebl-20" title="details at amazon (via my associates id)">ISBN:0201616416</a>]:
</p>
<blockquote>
<p>Here is what I mean by simplest--four constraints, in priority order:</p>
<ol>
<li>The system (code and tests together) must communicate everything you want to communicate.</li>
<li>The system must contain no duplicate code. (1 and 2 together constitute the Once and Only Once Rule).</li>
<li>The system should have the fewest possible classes.</li>
<li>The system should have the fewest possible methods.</li>
</ol>
[...]
<p>If you view the design as a communication medium, then you will have objects or methods for every important concept.  You will choose the names of the classes and methods to work together.</p>
</blockquote>
<p>
I have my own issues with that definition that I hope to pick up in a later post. (For starters, define "everything you want to communicate".)
</p>
<p>
Mike goes on to question whether there are times when TSTTCPW conflicts with design for reuse.
</p><p>
I think this misses the test first aspect.  Consider approaching the Grep example test first.  A small set of tests that might lead to the first Grep implementation is:
</p>
<pre>static final String TEXT = "This is\na simple test";
Grep grep = null;
BufferedReader reader = null;
&nbsp;
void setUp() {
  grep = new Grep();
  reader = new BufferedReader(new StringReader(TEXT));
}
&nbsp;
void testDoesContain() {
  assertTrue(grep.contains(reader,"is");
}
&nbsp;
void testDoesNotContain() {
  assertFalse(grep.contains(reader,"is not");
}
&nbsp;
void testPatternsSplitAcrossMultipleLinesAreNotFound() {
  assertFalse(grep.contains(reader,"is*a");
}</pre>
<p>
Mike asserts that the Grep implementation would be more useful if it could interoperate with multiple regular expression frameworks, and provides an example "Inversion of Control" approach for doing so.  Want to make that Grep implementation work with multiple regular expression frameworks?  Great.  First, write a test that fails:
</p>
<pre>void testGrepWithJakartaRegexp() {
   RegexpProvider rep = new RegexpRegexpProvider();
   ReusableGrep grep = new ReusableGrep(rep);
   assertTrue(grep.contains(reader,"is");
   assertFalse(grep.contains(reader,"is not");
}
&nbsp;
void testGrepWithJakartaOro() {
   RegexpProvider rep = new OroRegexpProvider();
   ReusableGrep grep = new ReusableGrep(rep);
   assertTrue(grep.contains(reader,"is");
   assertFalse(grep.contains(reader,"is not");
}</pre>
<p>
(Alternatively, (1) define a "mock" instance of RegexpProvider for the purpose of this test rather than using specific implementations and (2) define an abstract getRegexpProvider method in your test class, an implement these tests as concrete extensions of that abstract test case, but I digress.)
</p><p>
Now we can justify the creation of the RegexpProvider interface, and ReusableGrep still meets the "simplest" criteria.  (Ignoring that ORO and Regexp likely support slightly different syntaxes.)
</p><p>
I think Mike's first instinct--simple is "the smallest amount of code" that will "get the test case[s] running and refuses to concern itself with any potential future requirement" is the right one.  Have additional requirements you'd like to assert? Then express them as tests and this simple rule allows you to support them.  When approaching development test first I think a lot these questions about "what is simple" simply fade away, as does much premature generalization.  (And I say that without taking a position on whether ReusableGrep represents premature generalization or not.  I recognize that it's meant as a trivial example.)
</p><p>
PS: I can't resist the tempation to plug a <a href="http://jakarta.apache.org/commons/sandbox/functor" title="Apache's Jakarta-Commons Functor">commons-functor</a> approach to this Grep implementation.  How about something like:</p><p>
</p><pre>Lines.from(reader).contains(RegexpMatch.of("my expression"))</pre>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/01.html#a39" title="item permalink">posted&nbsp;4:01:22 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (39)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (39)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39">(link)</a>
</div>
  <p></p>


< Tuesday, 1 July 2003 >

Re: Test Driven Development versus Component Reuse <sup><a href="http://radio.weblogs.com/0122027/2003/07/01.html#a39" title="item permalink">#</a></sup>


  <p>
Over on the <a href="http://www.softwarecraftsmen.com/blog/" title="Software Craftsmen">Software Craftsmen blog</a>, Mike Hogan <a href="http://www.softwarecraftsmen.com/blog/archives/000003.html" title="Test Driven Development versus Component Reuse">asks</a> what is meant by "the simplest thing that could possibly work".  For what it's worth, Beck actually addresses this point directly in <i>Extreme Programming Explained</i> [<a href="http://www.amazon.com/exec/obidos/ASIN/0201616416/rodsradiowebl-20" title="details at amazon (via my associates id)">ISBN:0201616416</a>]:
</p>
<blockquote>
<p>Here is what I mean by simplest--four constraints, in priority order:</p>
<ol>
<li>The system (code and tests together) must communicate everything you want to communicate.</li>
<li>The system must contain no duplicate code. (1 and 2 together constitute the Once and Only Once Rule).</li>
<li>The system should have the fewest possible classes.</li>
<li>The system should have the fewest possible methods.</li>
</ol>
[...]
<p>If you view the design as a communication medium, then you will have objects or methods for every important concept.  You will choose the names of the classes and methods to work together.</p>
</blockquote>
<p>
I have my own issues with that definition that I hope to pick up in a later post. (For starters, define "everything you want to communicate".)
</p>
<p>
Mike goes on to question whether there are times when TSTTCPW conflicts with design for reuse.
</p><p>
I think this misses the test first aspect.  Consider approaching the Grep example test first.  A small set of tests that might lead to the first Grep implementation is:
</p>
<pre>static final String TEXT = "This is\na simple test";
Grep grep = null;
BufferedReader reader = null;
&nbsp;
void setUp() {
  grep = new Grep();
  reader = new BufferedReader(new StringReader(TEXT));
}
&nbsp;
void testDoesContain() {
  assertTrue(grep.contains(reader,"is");
}
&nbsp;
void testDoesNotContain() {
  assertFalse(grep.contains(reader,"is not");
}
&nbsp;
void testPatternsSplitAcrossMultipleLinesAreNotFound() {
  assertFalse(grep.contains(reader,"is*a");
}</pre>
<p>
Mike asserts that the Grep implementation would be more useful if it could interoperate with multiple regular expression frameworks, and provides an example "Inversion of Control" approach for doing so.  Want to make that Grep implementation work with multiple regular expression frameworks?  Great.  First, write a test that fails:
</p>
<pre>void testGrepWithJakartaRegexp() {
   RegexpProvider rep = new RegexpRegexpProvider();
   ReusableGrep grep = new ReusableGrep(rep);
   assertTrue(grep.contains(reader,"is");
   assertFalse(grep.contains(reader,"is not");
}
&nbsp;
void testGrepWithJakartaOro() {
   RegexpProvider rep = new OroRegexpProvider();
   ReusableGrep grep = new ReusableGrep(rep);
   assertTrue(grep.contains(reader,"is");
   assertFalse(grep.contains(reader,"is not");
}</pre>
<p>
(Alternatively, (1) define a "mock" instance of RegexpProvider for the purpose of this test rather than using specific implementations and (2) define an abstract getRegexpProvider method in your test class, an implement these tests as concrete extensions of that abstract test case, but I digress.)
</p><p>
Now we can justify the creation of the RegexpProvider interface, and ReusableGrep still meets the "simplest" criteria.  (Ignoring that ORO and Regexp likely support slightly different syntaxes.)
</p><p>
I think Mike's first instinct--simple is "the smallest amount of code" that will "get the test case[s] running and refuses to concern itself with any potential future requirement" is the right one.  Have additional requirements you'd like to assert? Then express them as tests and this simple rule allows you to support them.  When approaching development test first I think a lot these questions about "what is simple" simply fade away, as does much premature generalization.  (And I say that without taking a position on whether ReusableGrep represents premature generalization or not.  I recognize that it's meant as a trivial example.)
</p><p>
PS: I can't resist the tempation to plug a <a href="http://jakarta.apache.org/commons/sandbox/functor" title="Apache's Jakarta-Commons Functor">commons-functor</a> approach to this Grep implementation.  How about something like:</p><p>
</p><pre>Lines.from(reader).contains(RegexpMatch.of("my expression"))</pre>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/07/01.html#a39" title="item permalink">posted&nbsp;4:01:22 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (39)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (39)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=39&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F07%2F01.html%23a39">(link)</a>
</div>
  <p></p>


< Monday, 30 June 2003 >

Like Clover? Check out JCoverage <sup><a href="http://radio.weblogs.com/0122027/2003/06/30.html#a37" title="item permalink">#</a></sup>


<p>
Like <a href="http://www.thecortex.net/clover/" title="Clover: a code coverage tool for Java">Clover</a>, <a href="http://jcoverage.com/" title="JCoverage: a code coverage tool for Java">JCoverage</a> is a code coverage analyzer for Java.  "Instrument" your code with either of these tools, run your unit test suite (really, execute the code in any way), and one can generate a report on what was executed (lines, methods, branches, etc.), and more importantly, what wasn't.
</p><p>
Unlike Clover:
</p><ul>
<li>JCoverage is <a href="http://www.gnu.org/copyleft/gpl.html" title="GNU General Public License">GPL</a>'ed</li>
<li>JCoverage instruments the byte code (via <a href="http://jakarta.apache.org/bcel/" title="Apache's BCEL: Byte Code Engineering Library">BCEL</a>) rather than the source, which seems substantially faster, at least under casual observation.</li>
<li>JCoverage is clever enough to not instrument select lines--lines that invoke <a href="http://jakarta.apache.org/log4j/" title="Apache's Log4J">log4j</a> for example--which means that logging calls don't pollute your coverage metrics, whether or not you run the test suite with logging on.</li>
<li>JCoverage can generate a complete, parsable coverage report in XML from which you can render custom reports or derived statistics.</li>
<li>JCoverage includes custom <a href="http://ant.apache.org/" title="Apache Ant: a Java-based build tool">Ant</a> tags for instrumentation, reporting and even asserting levels of coverage at a fine grained level.</li>
<li>JCoverage makes it easy to merge coverage databases across several runs--for unit and functional tests, for example, or to create a single report for independently built components. (Of course, given the XML report, it may be tedious but shouldn't be difficult to do this sort of merge on "manually" either.)</li>
</ul><p>
With JCoverage, I think I'll need to reconsider <a href="http://radio.weblogs.com/0122027/2003/06/23.html#a32" title="23 June 2003: A Frog Boiling Approach to Increasing Test Coverage">my position</a> that coverage analysis may be too slow to execute with every continuous integration build.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/30.html#a37" title="item permalink">posted&nbsp;8:59:57 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=37&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F30.html%23a37" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (37)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=37&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F30.html%23a37">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=37&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F30.html%23a37" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (37)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=37&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F30.html%23a37">(link)</a>
</div>
  <p></p>


< Thursday, 26 June 2003 >

Re: Why Java is not Open Source <sup><a href="http://radio.weblogs.com/0122027/2003/06/26.html#a36" title="item permalink">#</a></sup>


<p>
The CTO for Sun's Desktop Division <a href="http://today.java.net/pub/au/16" title="Hans Muller's bio on java.net">Hans Muller</a> <a href="http://weblogs.java.net/pub/wlg/202" title="Why Java is not Open Source: One Cowboy's Opinion">writes</a>:
</p>
<blockquote><i>I think that one of the primary reasons that Java is not an open source project is that given the size of the developer community, forks are unacceptable. In other words the millions of developers who build software on top of Java value its stability more than they value the right to get under the hood and fix it.</i></blockquote>
<p>
Hrrrm.  That seems like a moderately controversial statement to me, for several reasons:
</p><ol>
<li>The community's experience with <a href="http://www.python.org/">Python</a> (<a href="http://sourceforge.net/cvs/?group_id=5470" title="Python's page at Sourceforge">source</a>), <a href="http://www.ruby-lang.org/en/">Ruby</a> (<a href="http://www.ruby-lang.org/en/cvsrepo.html" title="Ruby CVS Repository Guide">source</a>), <a href="http://www.perl.com/">Perl</a> (<a href="http://www.perl.com/pub/a/language/info/software.html#sourcecode" title="Perl Source Code Distribution">source</a>) (and others) might be actively proving otherwise.</li>
<li>The metaphor about cowboys and power plants, like many physical metaphors for software development, simply doesn't work.  A version control system alone would alleviate this problem, as would a "gatekeeper" as Muller himself describes in the proceeding paragraphs.</li>
<li>Why not just define a specification and a <a href="http://jcp.org/en/introduction/glossary#T" title="Technology Compatibility Kit">TCK</a>, hang on to the Java trademark and make folks pay to describe their JRE as such.  It's precisely the same strategy used for the J2EE brand, isn't it?  Oh, <a href="http://www.google.com/search?q=sun+jboss">now I get it</a>.</li>
<li>Simply adding a patch mechanism to the <a href="http://developer.java.sun.com/developer/bugParade/" title="developer.java.sun.com's Bug Database">Bug Parade</a> and actually accepting them once in a while would seem to be a dramatic step forward, giving Sun many of the benefits of open source (and the development community a few) with little or no risk.</li>
</ol>
<p>
I didn't and still don't expect Sun to open source Java, although not for any of the reasons Muller describes.  Yet not having followed the <a href="http://java.net/" title="java.net - the Source for Java(tm) Technology Collaboration">java.net</a> phenomenon very closely, I had took it to be a sign that Sun is getting more clueful about the role of the developer community, and of the open source developer community in particular, in the success of Java, especially relative to the <a href="http://jcp.org" title="The Java Community Process(SM) Program">Java Community Process</a>.  Perhaps I was wrong.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/26.html#a36" title="item permalink">posted&nbsp;4:47:03 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=36&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F26.html%23a36" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (36)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=36&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F26.html%23a36">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=36&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F26.html%23a36" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (36)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=36&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F26.html%23a36">(link)</a>
</div>
  <p></p>


< Wednesday, 25 June 2003 >

Experimenting with Jester <sup><a href="http://radio.weblogs.com/0122027/2003/06/25.html#a35" title="item permalink">#</a></sup>


<p>
In a <a href="http://radio.weblogs.com/0122027/2003/06/24.html#a34" title="24 June 2003: Testing Testing">previous post</a> I alluded to the use of mutation testing to evaluate the completeness of a test suite, rather than relying upon pure test coverage metrics.  In a <a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=34" title="comments on &quot;Testing Testing&quot;">comment</a> to that post <a href="http://www.oshineye.com/" title="Adewale Oshineye's homepage">Adewale Oshineye</a> suggested that I check out Ivan Moore's <a href="http://jester.sourceforge.net/" title="Jester: the JUnit test tester">Jester</a>, a Java/JUnit based mutation testing tool.  I'd seen Jester before, but I'd never used it nor looked at it in much detail.  The anecdote about <a href="http://groups.yahoo.com/group/extremeprogramming/message/32277" title="jester shows bowling scoring could be simpler">what Jester uncovered</a> in Bob Martin's and Robert Koss's <a href="http://www.objectmentor.com/resources/articles/xpepisode.htm" title="Engineer Notebook: An Extreme Programming Episode">test driven bowling score calculator example</a> was certainly interesting, so this morning I bit the bullet and downloaded a copy.
</p><p>
Getting Jester up and running was a minor hassle (and it seems like much of that hassle could be alleviated), but I've written my share of open source projects with quirky configuration and installation, so I'll leave that alone.  Once my files were placed in the proper position and after tweaking the python scripts to get them to run on whatever version of python I've got on my RedHat box, Jester ran slowly (waiting on javac) but well.  It ran much faster once I figured out how to tell Jester to stop mutating my comments (set <code>shouldRemoveComments=true</code> in <code>jester.cfg</code>).  The result was a basic HTML report like <a href="http://jester.sourceforge.net/jester.html" title="example Jester report">this one</a>.
</p><p>
(On an unrelated note, is there something more or less equivalent to <code>python -version</code>?)
</p><p>
As an experiment, I took a small component (196 non-blank, non-comment lines of code spread over 34 methods) I knew to be well tested (100% coverage of statements and conditional expressions) and ran it through Jester.  It found 21 mutations total, 2 of which didn't lead to a test failure.  Those were (with the modified code in bold):
</p>
<pre>if(<b>TRUE ||</b> MESSAGE_LOG.isDebugEnabled()) {
   MESSAGE_LOG.debug("Broadcasting " + msg);
}</pre>
<p>and</p>
<pre>List list = new ArrayList(_listeners.size() + <b><strike>1</strike>2</b>);
list.addAll(_listeners);
list.add(<i>...</i>);</pre>
<p>
In the first case, believe it or not, I actually had unit tests that confirm that MESSAGE_LOG generates log events when set to the DEBUG priority, and no log events when set to higher than DEBUG priority.  (I wouldn't normally do that, except this is the single log message in that component, and I really wanted 100% coverage.  Besides, it wasn't that hard, I just added a mock Appender to that Category, and checked to see if a message was added or not.)  Of course, both of these tests still pass, even without the isDebugEnabled call, since the debug method won't generate a log event when using a higher priority.  Adding a test that fails as a result of this mutation isn't particularly useful, but it isn't difficult either--I just pass in a mock instance of the <i>msg</i> object and check whether or not the toString method is invoked.  Not invoking toString is indeed the reason for this if(isDebugEnabled()) block, so maybe that's not such an odd test to have after all.
</p><p>
The second case is the kind of thing Ivan Moore describes as a "false positive" in his <a href="http://www.xp2001.org/xp2001/conference/papers/Chapter20-Moore.pdf" title="Jester - a JUnit test tester">writeup on Jester</a>.  This code initializes that ArrayList to the precise size it knows will need.  Allocating it a little bit bigger or a little bit smaller doesn't alter the functional behavior of the method (although it will be slightly less efficient).  Maybe that indicates a premature optimization on my part, but it seems like a pretty small one.  In any event I don't see any way to confirm that that List was allocated to precisely the right size without breaking encapsulation profoundly, so I think I'll let that one go.
</p><p>
I had hoped to run Jester on some larger, more complicated but less well tested code (3,287 nc,nb lines, roughly 77% coverage) to get a feel for how it works in a more useful scenario, but I've been unable to get it to complete a run on the this larger component.  I may poke around with something in-between, but 4,000 lines is on the smallish side for the kinds of modules I'd want to run this on.  I may have better luck mutating a single class at a time.
</p><p>
In short, I think Jester meets <a href="http://www.intertwingly.net/blog/" title="intertwingly.net: Sam Ruby's Weblog">Sam Ruby</a>'s criteria for a successful open source project--it's a good idea with a bad implementation.  I have some thoughts on how to improve that implementation (mainly obvious ones--e.g., use a ClassLoader and an actual parser, or consider mutating the byte code rather than the source) that maybe I'll cover in a later post.  All in all, Jester is an interesting project, and like a lot of things, I wish it worked a bit better.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/25.html#a35" title="item permalink">posted&nbsp;1:29:35 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=35&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F25.html%23a35" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (35)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=35&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F25.html%23a35">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=35&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F25.html%23a35" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (35)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=35&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F25.html%23a35">(link)</a>
</div>
  <p></p>


< Tuesday, 24 June 2003 >

Testing Testing <sup><a href="http://radio.weblogs.com/0122027/2003/06/24.html#a34" title="item permalink">#</a></sup>


<p>
My fear, and perhaps it's not a well founded one, is that <a href="http://radio.weblogs.com/0122027/2003/06/23.html#a32" title="23 June 2003: A Frog Boiling Approach to Increasing Test Coverage">the pursuit of pure test coverage</a>--the percentage of lines, statements, methods, etc. tested--will provide a false sense of completeness.  If "percent executed by test code" is your sole metric, it's easy to write superficial tests that execute statements, but actually "test" very little.
</p><p>
For example, a couple of weeks ago I added the following test to one of our suites:
</p>
<pre>public void testStartStop() {
  AppMain app = new AppMain();
  assertFalse(app.isStarted());
  app.start();
  assertTrue(app.isStarted());
  app.stop();
  assertFalse(app.isStarted());
}</pre>
<p>
This single test--directly invoking just four distinct methods and comprising only three assertions--executed an additional 1,500 lines or so, roughly 10% of the code for this module.  You can be sure that the bulk of the functionality provided by those 1,500 lines is not actually tested here.  Indeed, the following (test first) implementation would suffice:
</p>
<pre>class AppMain {
  void start() {
    started = true;
  }
  void stop() {
    started = false;
  }
  boolean isStarted() {
    return started;
  }
  boolean started = false;
}</pre>
<p>
Is this test useless?  At this point I'll argue it isn't.  Superficial testing of these 1,500 lines is better than no testing at all.  This test at least confirms that we've got the classpath right (including any resources loaded on application startup) and that there aren't any uncaught exceptions being thrown on startup.  (When better tests are in place, this superficial test may indeed become useless.) But the resulting test coverage metric is certainly misleading.
</p><p>
One solution, probably the right one, is to simply <a href="http://www.junit.org/news/article/test_first/index.htm" title="JUnit.org: Test First Articles">develop the code test first</a>.  If every change to production code was made to address a failing test (or to refactor under a unchanging test suite) then one certainly wouldn't find himself in this situation.  But this solution doesn't address my (our) current situation, in which we have 100,000 lines of "legacy" code and perhaps 60% of that code was developed "test last" if test at all.  The lack of tests has become a drag on our ability to refactor or simply work with that code.  If it was sufficient to simply tell folks to develop test first, I wouldn't be as concerned with measuring test coverage in the first place.
</p><p>
Mutation testing--in which we randomly change some piece of production code and check to see if our test suite detects the change--is another approach I've seen proposed before, but I'm having trouble buying into that.  If we start with poorly factored code, it seems likely that a random change is going to break something, probably profoundly (like leading to an exception being thrown).  Even superficial testing will detect those sort of problems.
</p><p>
Alternative but indirect metrics may be a better approach.  Tracking the number of distinct tests or facts being asserted might give a rough idea of how robust the test suite is.  To do this right I think I'd need some numbers from well tested portions of the code base that correlate size or complexity metrics with the number of tests or assertions in the test suite.  These might be interesting numbers to collect.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/24.html#a34" title="item permalink">posted&nbsp;9:09:46 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (34)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (34)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34">(link)</a>
</div>
  <p></p>


< Tuesday, 24 June 2003 >

Testing Testing <sup><a href="http://radio.weblogs.com/0122027/2003/06/24.html#a34" title="item permalink">#</a></sup>


  <p>
My fear, and perhaps it's not a well founded one, is that <a href="http://radio.weblogs.com/0122027/2003/06/23.html#a32" title="23 June 2003: A Frog Boiling Approach to Increasing Test Coverage">the pursuit of pure test coverage</a>--the percentage of lines, statements, methods, etc. tested--will provide a false sense of completeness.  If "percent executed by test code" is your sole metric, it's easy to write superficial tests that execute statements, but actually "test" very little.
</p><p>
For example, a couple of weeks ago I added the following test to one of our suites:
</p>
<pre>public void testStartStop() {
  AppMain app = new AppMain();
  assertFalse(app.isStarted());
  app.start();
  assertTrue(app.isStarted());
  app.stop();
  assertFalse(app.isStarted());
}</pre>
<p>
This single test--directly invoking just four distinct methods and comprising only three assertions--executed an additional 1,500 lines or so, roughly 10% of the code for this module.  You can be sure that the bulk of the functionality provided by those 1,500 lines is not actually tested here.  Indeed, the following (test first) implementation would suffice:
</p>
<pre>class AppMain {
  void start() {
    started = true;
  }
  void stop() {
    started = false;
  }
  boolean isStarted() {
    return started;
  }
  boolean started = false;
}</pre>
<p>
Is this test useless?  At this point I'll argue it isn't.  Superficial testing of these 1,500 lines is better than no testing at all.  This test at least confirms that we've got the classpath right (including any resources loaded on application startup) and that there aren't any uncaught exceptions being thrown on startup.  (When better tests are in place, this superficial test may indeed become useless.) But the resulting test coverage metric is certainly misleading.
</p><p>
One solution, probably the right one, is to simply <a href="http://www.junit.org/news/article/test_first/index.htm" title="JUnit.org: Test First Articles">develop the code test first</a>.  If every change to production code was made to address a failing test (or to refactor under a unchanging test suite) then one certainly wouldn't find himself in this situation.  But this solution doesn't address my (our) current situation, in which we have 100,000 lines of "legacy" code and perhaps 60% of that code was developed "test last" if test at all.  The lack of tests has become a drag on our ability to refactor or simply work with that code.  If it was sufficient to simply tell folks to develop test first, I wouldn't be as concerned with measuring test coverage in the first place.
</p><p>
Mutation testing--in which we randomly change some piece of production code and check to see if our test suite detects the change--is another approach I've seen proposed before, but I'm having trouble buying into that.  If we start with poorly factored code, it seems likely that a random change is going to break something, probably profoundly (like leading to an exception being thrown).  Even superficial testing will detect those sort of problems.
</p><p>
Alternative but indirect metrics may be a better approach.  Tracking the number of distinct tests or facts being asserted might give a rough idea of how robust the test suite is.  To do this right I think I'd need some numbers from well tested portions of the code base that correlate size or complexity metrics with the number of tests or assertions in the test suite.  These might be interesting numbers to collect.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/24.html#a34" title="item permalink">posted&nbsp;9:09:46 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (34)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (34)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=34&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F24.html%23a34">(link)</a>
</div>
  <p></p>


< Monday, 23 June 2003 >

A Frog Boiling Approach to Increasing Test Coverage <sup><a href="http://radio.weblogs.com/0122027/2003/06/23.html#a32" title="item permalink">#</a></sup>


  <p>
Some thinking out loud about concrete goals for increasing test coverage.
</p><p>
The production (i.e., non test) Java code base at my day job consists of roughly 103,000 non-comment, non-blank lines of code, split over 132 "modules".  Our automated unit test suite exercises roughly 29% of those lines.
</p><p>
(That 29% figure sounds a little bit worse than it feels to me.  Some areas of the code base are well tested, several are even at 100% coverage.  Others have few if any tests, but as a result of remaining essentially untouched since before a formal unit testing initiative was launched 30 months or so ago.  Yet many modules are woefully undertested, and probably not coincidentally several of those have substantial bloat--the number of lines in those modules is way out of proportion with the functionality they provide.)
</p><p>
Whether that 29% figure is indicative or not, it's clearly much lower than desirable.  (Personally I've been striving for and generally achieving 100% coverage for new development.)   I've been thinking a bit about laying out concrete goals for increasing this coverage.
</p><p>
We've talked a bit about simply targeting some figure, say 80% coverage, and perhaps some intermediate goals (for example, 40%, then 60%, then 80%).
</p><p>
While the "frog boiling" approach--slowly raising the temperature on test coverage--appeals to me, something about the arbitrary "percent coverage" goals doesn't seem right.  I think I'd prefer goals that call for complete (100%) coverage of something, perhaps with different values of "something".  I'm not entirely sure why.
</p><p>
Specifically, I'm thinking of the following stages:
</p>
<ol>
<li>All modules have tests.  Conveniently, this can be easily and quickly tested at build time.  We can make the absence of tests a build failure.  It is possible to programmatically evaluate the remaining goals, but not as quickly.  We'd have to execute the test coverage check on every continuous integration build, something that may take too much time.</li>
<li>All packages have tests.  This should be relatively easy to achieve once the first goal is reached.</li>
<li>All classes have tests.</li>
<li>All methods have tests.</li>
</ol>
<p>
I'm not sure where to go from that point.  Complete coverage of conditionals (every boolean expression is evaluated at least once to true and at least once to false) may be a good next step, but isn't as pithy as the other goals.  It may be that once we've reached 100% method coverage, 100% line/statement coverage is within easy reach.  I suspect that once we've reached that fourth goal, the next step will be pretty clear.
</p><p>
I wonder if any reader has some experience with similar strategies for increasing test coverage through a series of concrete goals.  What goals did you select, and why?  Did a given step turn out to be too large or too small?
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/23.html#a32" title="item permalink">posted&nbsp;11:28:51 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=32&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F23.html%23a32" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (32)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=32&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F23.html%23a32">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=32&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F23.html%23a32" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (32)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=32&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F23.html%23a32">(link)</a>
</div>
  <p></p>


< Tuesday, 17 June 2003 >

the fixmeister role, or ''you, help me'' <sup><a href="http://radio.weblogs.com/0122027/2003/06/17.html#a31" title="item permalink">#</a></sup>


<p>
In some <a href="http://radio.weblogs.com/0122027/2003/04/28.html#a26" title="28 April 2003: A Little Background on our Continuous Integration Setup">previous</a> <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">posts</a>, I discussed some of the challenges we've experienced maintaining a <a href="http://www.martinfowler.com/articles/continuousIntegration.html" title="Continuous Integration by Martin Fowler and Matthew Foemmel">continuous integration</a> discipline at my day job.  In my last post on this topic, I alluded to "additional measures" which we adopted.  Time to describe what I was talking about.
</p><p>
Although I hadn't seen it at the time of the events described below, I recently ran across a comment on <a href="http://c2.com/cgi/wiki" title="Ward's Wiki: Front Page">Ward's Wiki</a> that accurately captures the problem we encountered and its solution:
</p><blockquote>
<p><i>There was an interesting psych study along these lines. There is one "victim" and several "bystanders". Each of the bystanders individually would be perfectly capable of helping the victim, but since they <a href="http://c2.com/cgi/wiki?NeverVolunteer" title="Ward's Wiki: Never Volunteer">NeverVolunteer</a>, none of them do. This happens in real life situations. If you are the victim and want help, what you need to do is to pick one person from the bystanders and say to them specifically "you help me". If you just do "somebody help me" it won't work. -- <a href="http://c2.com/cgi/wiki?AndyPierce" title="Ward's Wiki: Andy Pierce">AndyPierce</a></i> [from <a href="http://c2.com/cgi/wiki?NeverVolunteer" title="Ward's Wiki: Never Volunteer">Never Volunteer</a>]</p>
</blockquote>
<p>
Toward the end of April, in the midst of one of the longer low points in our <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">development cycle</a>, I sent the following (slightly edited) email to my peers on the technology management team.  At the time it felt a bit like a failure.
</p>
<blockquote>
<p>
<b>Subject:</b> build failures, and what to do about them
<br>
<b>Sent:</b> Wed 4/23/2003 10:29 AM
</p><p>
There was a time, not so long ago, when we would regularly see a dozen or more good integration builds per day. In fact the vast majority of builds were clean ones. (See <i>[internal link to an historical report on continuous integration builds]</i>.)  Recently (meaning the past few months) we're lucky to see a dozen good builds in a week.
</p><p>
As we've seen rather directly the past couple of weeks, our inability to regularly integrate changes across the entire code base slows our development process, delays production releases and may threaten our ability to deliver products according to schedule.  Moreover, integration problems compound themselves.  When we go several hours (let alone several days) without a clean build, it's no longer just one problem we need to fix, but several problems that are hidden behind the first one, masked because problems in some dependent library stops the build before it discovers the later problems.
</p><p>
These integration problems are real problems.  A "broken build" means that there is some code that either doesn't work at all, doesn't work in relation to other libraries, or doesn't work outside a particular developer's (or developers') sandbox.  These problems may not impact every developer at all times, but it is quite likely they impact some developer.  It is guaranteed that they will impact the entire technology team and for that matter the entire enterprise when it comes time to release a product (and as I understand it, we have a few of those queued up in the near future).  By and large, the way in which developers avoid this problem is to simply not update their local repositories.  That's a false sense of progress if there ever was one.
</p><p>
Some developers have complained about this problem.  Some managers have as well.  We've made increasingly obnoxious efforts (<i>[internal link to our nag servlet, as described in a <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">previous entry</a>]</i>) to increase the visibility of this problem, but it's not getting better.  And due to the compounding behavior described above, when it's not getting better, it's getting worse.
</p><p>
I propose we do the following:  For each series of build failures (that is, for every continuous sequence of failures, no matter how many underlying causes they might have) we name one arbitrarily selected developer to be "on point" for achieving a clean build.  Achieving a clean build becomes this developer's top priority (if they need to weasel out of it in order to something that is "more important", they do that by finding someone else willing to trade slots with them).  In exchange for this responsibility, we give this developer the authority to grab whomever then need to do whatever they need to accomplish this goal.  If Alice, being on point, needs Jose's help to diagnose a problem, or needs Jose to make changes to some library in order to bring said library into sync, then this becomes Jose's top priority as well (see the "weaseling out of it" strategy above).  Similarly, if Alice, being on point, needs Jose to take over some task Alice would otherwise be working on, she is empowered to do that as well.
</p><p>
Why?
</p><p>
1) Having a code base that is not integrated is costing us a substantial amount of developer time, which means it's costing the company a substantial amount of money and threatening release schedules.
</p><p>
2) Things that are everyone's responsibility become no one's responsibility.  Actually, this isn't really it.  More accurately, when we fail to send a message that things that are everyone's responsibility are important, those things become the responsibility of a handful of truly responsible people.  There are developers who take build failures seriously, and make a well above average effort to address them.  These efforts are undermined by those who don't take build failures seriously (or insufficiently seriously), and eventually, the patience of those good Samaritans wears thin.  I know mine did several weeks ago and I've notice a degradation in the integration quality since that time.  It was my hope that others would step up to take greater responsibility for integration builds, some did, but seemingly not enough.
</p><p>
<i>[It may seem that I'm overestimating my contribution there, but I literally, personally, addressed perhaps 30% of the build failures for several months.  I looked at each and every build failure, and when it seemed no one was making progress in addressing it, I'd fix it myself.  Frankly, I did this because (a) when our CI process was first initiated, there were a number of detractors that claimed this simply wouldn't work, and (b) it seems like this simply the right approach to a CI process--I'd expect everyone to do more or less the same thing.]</i>
</p><p>
3) Making fixing the build a top priority sends the message that we take continuous integration seriously, as a management team, as a development team, and as an enterprise.
</p><p>
4) Selecting an arbitrary developer to be on point offers a number of advantages:
</p><p>
a) It increases the visibility of build issues, the kinds of problems that cause them, and an effective strategy for resolving them, across the whole team.  Folks who may have never before thought about how to diagnose an arbitrary problem reported by the CI server are forced to do so.  Folks who may have never reflected on the kinds of changes that are problematic, or how to make changes in an incremental and backwards compatible way are exposed to those sorts of issues and those sorts of solutions.
</p><p>
b) It applies stronger peer pressure.  For quite some time I would personally "nag" folks to fix build issues, even sit down with them to explain the nature or the problem and the needed fix.  After a while, this nagging decreases in effectiveness, since "Rod's always complaining about the build".  When several different folks in a week are nagging you to fix problems you've caused, the pressure not to cause such problems (or to fix them on you own initiative) is increased.  When several different folks find themselves nagging the same person over and over again, the pressure on that person to improve their personal process is increased.
</p><p>
c) It causes greater knowledge sharing.  When put on point to fix a problem in some otherwise unknown library, a developer is forced to learn something about it, probably by pairing with someone more knowledgeable about it.  When a developer finds that they are consistently being "bothered" to update a library because they are the only ones that understand it, the pressure to make it more understandable or to share some of that understanding is increased.
</p><p>
d) Indirectly, it sends the message that fixing the build really is everyone's responsibility.  The arbitrary developer "on point" is simply putting a face on the team's concerns.
</p><p>
I'd very much like to start putting people "on point" for fixing the build today, probably by calling an all developer meeting to explain this protocol.  I'd also very much like to not have this protocol undermined by some direct or indirect message of "well, that's important, but this is more important" (where "this" is some more urgent, but not necessarily more important task).  We have more than enough developers to manage both the urgent and important tasks on our plate, and I'll argue that an approach that doesn't make integration a top if not the top priority is going to cost us in the long run.  If anyone has objections or an alternative strategy, I'd love to hear about it.
</p></blockquote>
<p>
This strategy was well received by the management team, and was implemented almost immediately.  This strategy was less well received by some members of the development team, but there was at least grudging acceptance from everyone.
</p><p>
The team has come to call this role the "fixmeister" (a name which I'm personally not very fond of).  The first fixmeister had the excellent suggestion that each subsequent fixmeister be selected by the current one, which has led to an interesting variety of selection algorithms, some whimsical, some instructional, some a bit malicious.
</p><p>
In the eight weeks or so since this process was initiated, we've been around the team slightly more than once.  It's been effective in achieving the primary goal--increasing the ratio of build successes to build failures.  I'd like to think it's been effective in achieving some of the harder-to-measure goals as well. (It's certainly increased awareness of the CI process among the less process oriented members of the team, and perhaps taken away some of the mystery of the process.)  Maybe time will tell on the other points.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/17.html#a31" title="item permalink">posted&nbsp;2:12:10 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (31)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (31)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31">(link)</a>
</div>
  <p></p>


< Tuesday, 17 June 2003 >

the fixmeister role, or ''you, help me'' <sup><a href="http://radio.weblogs.com/0122027/2003/06/17.html#a31" title="item permalink">#</a></sup>


  <p>
In some <a href="http://radio.weblogs.com/0122027/2003/04/28.html#a26" title="28 April 2003: A Little Background on our Continuous Integration Setup">previous</a> <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">posts</a>, I discussed some of the challenges we've experienced maintaining a <a href="http://www.martinfowler.com/articles/continuousIntegration.html" title="Continuous Integration by Martin Fowler and Matthew Foemmel">continuous integration</a> discipline at my day job.  In my last post on this topic, I alluded to "additional measures" which we adopted.  Time to describe what I was talking about.
</p><p>
Although I hadn't seen it at the time of the events described below, I recently ran across a comment on <a href="http://c2.com/cgi/wiki" title="Ward's Wiki: Front Page">Ward's Wiki</a> that accurately captures the problem we encountered and its solution:
</p><blockquote>
<p><i>There was an interesting psych study along these lines. There is one "victim" and several "bystanders". Each of the bystanders individually would be perfectly capable of helping the victim, but since they <a href="http://c2.com/cgi/wiki?NeverVolunteer" title="Ward's Wiki: Never Volunteer">NeverVolunteer</a>, none of them do. This happens in real life situations. If you are the victim and want help, what you need to do is to pick one person from the bystanders and say to them specifically "you help me". If you just do "somebody help me" it won't work. -- <a href="http://c2.com/cgi/wiki?AndyPierce" title="Ward's Wiki: Andy Pierce">AndyPierce</a></i> [from <a href="http://c2.com/cgi/wiki?NeverVolunteer" title="Ward's Wiki: Never Volunteer">Never Volunteer</a>]</p>
</blockquote>
<p>
Toward the end of April, in the midst of one of the longer low points in our <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">development cycle</a>, I sent the following (slightly edited) email to my peers on the technology management team.  At the time it felt a bit like a failure.
</p>
<blockquote>
<p>
<b>Subject:</b> build failures, and what to do about them
<br>
<b>Sent:</b> Wed 4/23/2003 10:29 AM
</p><p>
There was a time, not so long ago, when we would regularly see a dozen or more good integration builds per day. In fact the vast majority of builds were clean ones. (See <i>[internal link to an historical report on continuous integration builds]</i>.)  Recently (meaning the past few months) we're lucky to see a dozen good builds in a week.
</p><p>
As we've seen rather directly the past couple of weeks, our inability to regularly integrate changes across the entire code base slows our development process, delays production releases and may threaten our ability to deliver products according to schedule.  Moreover, integration problems compound themselves.  When we go several hours (let alone several days) without a clean build, it's no longer just one problem we need to fix, but several problems that are hidden behind the first one, masked because problems in some dependent library stops the build before it discovers the later problems.
</p><p>
These integration problems are real problems.  A "broken build" means that there is some code that either doesn't work at all, doesn't work in relation to other libraries, or doesn't work outside a particular developer's (or developers') sandbox.  These problems may not impact every developer at all times, but it is quite likely they impact some developer.  It is guaranteed that they will impact the entire technology team and for that matter the entire enterprise when it comes time to release a product (and as I understand it, we have a few of those queued up in the near future).  By and large, the way in which developers avoid this problem is to simply not update their local repositories.  That's a false sense of progress if there ever was one.
</p><p>
Some developers have complained about this problem.  Some managers have as well.  We've made increasingly obnoxious efforts (<i>[internal link to our nag servlet, as described in a <a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="29 April 2003: build cycles, development cycles, and the nag server">previous entry</a>]</i>) to increase the visibility of this problem, but it's not getting better.  And due to the compounding behavior described above, when it's not getting better, it's getting worse.
</p><p>
I propose we do the following:  For each series of build failures (that is, for every continuous sequence of failures, no matter how many underlying causes they might have) we name one arbitrarily selected developer to be "on point" for achieving a clean build.  Achieving a clean build becomes this developer's top priority (if they need to weasel out of it in order to something that is "more important", they do that by finding someone else willing to trade slots with them).  In exchange for this responsibility, we give this developer the authority to grab whomever then need to do whatever they need to accomplish this goal.  If Alice, being on point, needs Jose's help to diagnose a problem, or needs Jose to make changes to some library in order to bring said library into sync, then this becomes Jose's top priority as well (see the "weaseling out of it" strategy above).  Similarly, if Alice, being on point, needs Jose to take over some task Alice would otherwise be working on, she is empowered to do that as well.
</p><p>
Why?
</p><p>
1) Having a code base that is not integrated is costing us a substantial amount of developer time, which means it's costing the company a substantial amount of money and threatening release schedules.
</p><p>
2) Things that are everyone's responsibility become no one's responsibility.  Actually, this isn't really it.  More accurately, when we fail to send a message that things that are everyone's responsibility are important, those things become the responsibility of a handful of truly responsible people.  There are developers who take build failures seriously, and make a well above average effort to address them.  These efforts are undermined by those who don't take build failures seriously (or insufficiently seriously), and eventually, the patience of those good Samaritans wears thin.  I know mine did several weeks ago and I've notice a degradation in the integration quality since that time.  It was my hope that others would step up to take greater responsibility for integration builds, some did, but seemingly not enough.
</p><p>
<i>[It may seem that I'm overestimating my contribution there, but I literally, personally, addressed perhaps 30% of the build failures for several months.  I looked at each and every build failure, and when it seemed no one was making progress in addressing it, I'd fix it myself.  Frankly, I did this because (a) when our CI process was first initiated, there were a number of detractors that claimed this simply wouldn't work, and (b) it seems like this simply the right approach to a CI process--I'd expect everyone to do more or less the same thing.]</i>
</p><p>
3) Making fixing the build a top priority sends the message that we take continuous integration seriously, as a management team, as a development team, and as an enterprise.
</p><p>
4) Selecting an arbitrary developer to be on point offers a number of advantages:
</p><p>
a) It increases the visibility of build issues, the kinds of problems that cause them, and an effective strategy for resolving them, across the whole team.  Folks who may have never before thought about how to diagnose an arbitrary problem reported by the CI server are forced to do so.  Folks who may have never reflected on the kinds of changes that are problematic, or how to make changes in an incremental and backwards compatible way are exposed to those sorts of issues and those sorts of solutions.
</p><p>
b) It applies stronger peer pressure.  For quite some time I would personally "nag" folks to fix build issues, even sit down with them to explain the nature or the problem and the needed fix.  After a while, this nagging decreases in effectiveness, since "Rod's always complaining about the build".  When several different folks in a week are nagging you to fix problems you've caused, the pressure not to cause such problems (or to fix them on you own initiative) is increased.  When several different folks find themselves nagging the same person over and over again, the pressure on that person to improve their personal process is increased.
</p><p>
c) It causes greater knowledge sharing.  When put on point to fix a problem in some otherwise unknown library, a developer is forced to learn something about it, probably by pairing with someone more knowledgeable about it.  When a developer finds that they are consistently being "bothered" to update a library because they are the only ones that understand it, the pressure to make it more understandable or to share some of that understanding is increased.
</p><p>
d) Indirectly, it sends the message that fixing the build really is everyone's responsibility.  The arbitrary developer "on point" is simply putting a face on the team's concerns.
</p><p>
I'd very much like to start putting people "on point" for fixing the build today, probably by calling an all developer meeting to explain this protocol.  I'd also very much like to not have this protocol undermined by some direct or indirect message of "well, that's important, but this is more important" (where "this" is some more urgent, but not necessarily more important task).  We have more than enough developers to manage both the urgent and important tasks on our plate, and I'll argue that an approach that doesn't make integration a top if not the top priority is going to cost us in the long run.  If anyone has objections or an alternative strategy, I'd love to hear about it.
</p></blockquote>
<p>
This strategy was well received by the management team, and was implemented almost immediately.  This strategy was less well received by some members of the development team, but there was at least grudging acceptance from everyone.
</p><p>
The team has come to call this role the "fixmeister" (a name which I'm personally not very fond of).  The first fixmeister had the excellent suggestion that each subsequent fixmeister be selected by the current one, which has led to an interesting variety of selection algorithms, some whimsical, some instructional, some a bit malicious.
</p><p>
In the eight weeks or so since this process was initiated, we've been around the team slightly more than once.  It's been effective in achieving the primary goal--increasing the ratio of build successes to build failures.  I'd like to think it's been effective in achieving some of the harder-to-measure goals as well. (It's certainly increased awareness of the CI process among the less process oriented members of the team, and perhaps taken away some of the mystery of the process.)  Maybe time will tell on the other points.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/06/17.html#a31" title="item permalink">posted&nbsp;2:12:10 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (31)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (31)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=31&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F06%2F17.html%23a31">(link)</a>
</div>
  <p></p>


< Monday, 5 May 2003 >

The Pleasures of Profiling <sup><a href="http://radio.weblogs.com/0122027/2003/05/05.html#a29" title="item permalink">#</a></sup>


<p>
Prompted by <a href="http://www.nicklothian.com/" title="BadMagicNumber, Nick's Weblog">Nick</a>'s <a href="http://www.nicklothian.com/blog/2003/04/29/#axion1" title="29 Apr 2003: Axion">post</a> about <a href="http://axion.tigris.org/" title="Axion, an Open Source Java Relational Database Engine">Axion</a>'s insert performance and some internal product delivery schedules, I've been doing some profiling and tuning of Axion's performance (with some <a href="http://axion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=471" title="Performance of Axion inserts">good</a> <a href="http://axion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=478" title="btree index performance improved by ~100x">results</a>).  I'm reminded of how much I truly enjoy this activity.
</p><p>
I can tell you don't believe me, so I took some notes and wrote up <a href="http://radio.weblogs.com/0122027/stories/2003/05/05/thePleasuresOfProfiling.html" title="the full article">a brief account</a>.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/05/05.html#a29" title="item permalink">posted&nbsp;3:52:21 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=29&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F05.html%23a29" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (29)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=29&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F05.html%23a29">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=29&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F05.html%23a29" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (29)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=29&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F05.html%23a29">(link)</a>
</div>
  <p></p>


< Friday, 2 May 2003 >

Unit tests with log statements are a code smell <sup><a href="http://radio.weblogs.com/0122027/2003/05/02.html#a28" title="item permalink">#</a></sup>


<p>
While this is not an earth shattering realization, I've come hold the opinion that log statements (<a href="http://jakarta.apache.org/log4j/" title="jakarta.apache.org/log4j">log4j</a>, <a href="http://avalon.apache.org/logkit/" title="avalon.apache.org/logkit">logkit</a>, <a href="http://java.sun.com/j2se/1.4.1/docs/api/java/util/logging/package-summary.html" title="javadocs for java.util.logging">java.util.logging</a>, <a href="http://jakarta.apache.org/commons/logging/" title="jakarta.apache.org/commons/logging">commons-logging</a>, what have you) within unit tests are a <a href="http://c2.com/cgi/wiki?CodeSmell" title="Ward's Wiki: CodeSmell">code smell</a>, perhaps universally.
</p><p>
While I'll sometimes add a few System.out.println calls to a unit test while I'm trying to diagnose a particular failure, configuring a full-blown logging setup within a unit test always seemed like more time and trouble than it was worth. From time to time I'll encounter a heavily logged TestCase in some code base I'm working with.  The more I work with such TestCases, the more I find this to be an indication that something is not right.
</p><p>
Here's why:
</p>
<ul>
<li>I find it hard to imagine a test first/test driven development approach that leads to log statements within unit tests (but I can imagine "test last" approaches that will). The presence of logging strongly suggests that the tested code was not developed in a test driven fashion.</li>
<li>The role of logging frameworks and that of automated unit testing frameworks are at odds.  Logging calls provide persistent, if only intermittently used, diagnostic and informational messages, typically intended for manual inspection <sup><a href="#n28.1">*</a></sup>.  Automated unit tests are meant to be self-interpreting, success or failure should be obvious without manual inspection.  The use of diagnostic or informational log messages within unit tests suggests your tests aren't sufficiently self-interpreting.</li>
<li>Anecdotally, the objects being tested by these cases are brittle in the face of change.  This may stem from poor factoring: there are too many subtle and perhaps unplanned interactions between methods, or methods aren't well focused enough to allow for orthogonal changes.</li>
<li>Anecdotally, test failures remain difficult to diagnose and fix despite the log messages. This also stems from poor factoring: the individual test cases and assertions are too coarse grained to help identify the root cause of a test failure.</li>
</ul>
<div class="footnote"><p><a name="n28.1">*</a> If you find yourself wanting programmatic inspection of log messages, I'll suggest you're looking for messaging, not logging.</p></div>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/05/02.html#a28" title="item permalink">posted&nbsp;12:15:02 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=28&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F02.html%23a28" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (28)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=28&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F02.html%23a28">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=28&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F02.html%23a28" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (28)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=28&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F05%2F02.html%23a28">(link)</a>
</div>
  <p></p>


< Tuesday, 29 April 2003 >

build cycles, development cycles, and the nag server <sup><a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="item permalink">#</a></sup>


<p>
One thing I've noticed about <a href="http://radio.weblogs.com/0122027/2003/04/28.html#a26" title="28 April 2003: A Little Background on our Continuous Integration Setup">our continuous integration process</a> and its meta-process is that both are cyclical.  Here's three examples:
</p>
<a name="whenItRains"></a><h3>..FF...FFFFFFFFFF...., or when it rains, it pours</h3>
<p>
One of the first things you notice when applying a continuous integration process to parallel development is that integration problems compound themselves.  (This isn't a side effect of continuous integration, CI simply makes this point clear.)
</p><p>
On most days we'll have (indeed, we expect) the occasional build failure--someone neglected to check in a file here, or forgot that component was using this method whose signature has changed, etc.  On good days, the team is on its collective toes and responds quickly to the failure notice.  The problems are resolved in a build or two and we're right back on track.  On bad days, an integration problem will persist for several builds, and as yet undiscovered and unreported problems will begin to queue up behind the first one as folks continue to make commits.  The longer the queue of integration problems get, the longer it gets.  As a result, bad days have a nasty habit of turning into bad weeks.
</p><p>
Anecdotally, the tipping point seems to be around three consecutive build failures.  When we hit the third consecutive failure, the odds of hitting a fourth, a fifth, or even a tenth failure seems to increase dramatically.  I think there are at least two reasons for this:  (1) Unless the developers notice and fix the problem on their own--independent of the CI build failure notifications--failures will almost always come in pairs.  By the time the nag email is delivered, let alone diagnosed and fixed, a second build will already be in progress.  If the problem is going to be fixed "immediately", then it will be fixed for the third build, but generally not before it. (2) Depending upon the specific component that encounters problems, a failed build takes 20 to 40 minutes.  Three consecutive failures means its been an hour, maybe two, since our last complete build.  On a busy day we can have quite a few commits in an hour, so the number of unintegrated changes grows quickly.  All of these changes need to be addressed before we reach a successful build.
</p>
<a name="twoStepsForward"></a><h3>two steps forward, one step back</h3>
<p>
We've found that our CI process doesn't progress monotonically.  We're constantly trying to strike a balance between the functionality provided by the CI builds, the time it takes to complete a build cycle, and the likelihood of extraneous build failures.  Often we find that we've stretched a bit too far and need to pull back.
</p><p>
Often the time it takes to complete a build is a driving factor.  For a time we generated and published JavaDoc documentation and various source code and test coverage metrics following every successful build, but we found this added too much time to the build cycle.  (As discussed <a href="#whenItRains" title="when it rains, it pours">above</a>, the longer changes wait to be integrated, the greater our exposure to risk.)  Instead, we rely upon cron-driven or manual processes to generate these artifacts.
</p><p>
At times, and to my great frustration, we've had to remove aspects of the build that were simply too brittle for continuous use.  Our <a href="http://jakarta.apache.org/commons/latka" title="Apache's Jakarta Commons Latka">Latka</a>-based functional test suite, which tests a number of our web applications, was largely removed from the CI builds largely because of test rot and the instabilities introduced by being too dependent upon external services that change outside of the build process (database servers are one, although not the only example here).  The CI process still deploys our web based applications, but leaves most of the functional testing to manual invocation.
</p>
<h3>the nag server</h3>
<p>
From time to time we find that the discipline of continuous integration begins to slip: successful builds become less frequent and broken builds are fixed more slowly.  The team gets used to seeing frequent build failures, begins ignoring nag messages, becomes complacent, and tends to look for local workarounds rather than addressing the global integration issues.  (This is an instance of the <a href="http://www.c2.com/cgi/wiki?FixBrokenWindows" title="Ward's Wiki: FixBrokenWindows">fix broken windows</a> pattern.)  Despite what Fowler will tell you, in my experience there are some developers who are more than happy to give up the benefits of a continuous integration process, or who fail to recognize what those benefits are in the first place.  (Perhaps not coincidentally, many of these developers haven't been working here as long as the CI process has.)  In part these cycles are an extension of the cycles above--cruft and insufficiently considered work-arounds build up until the code base is fundamentally brittle.   In part these cycles are related to the evolution of the code base--major, cross-component refactorings and shotgun maintenance sometimes lead to periods of build instability.  We've found that whatever the cause sometimes the team needs a little kick to get back on track.
</p><p>
<a href="http://radio.weblogs.com/0116794/" title="Weblog: Morgan Delagrange">Morgan</a> recently suggested one pleasingly simple kick of this sort.  While discussing a low point in our CI cycle, Morgan half-jokingly suggested that what we needed was a "nag server"--a giant, prominently located monitor that displays the status of the current build.  We jumped on it literally immediately, grabbed the biggest monitor we could find and an underused server; and set them up in the hallway in front of the primary development cube farm with a web browser continuously refreshing a simplier, bigger and bolder version of our build status page.  Morgan later added an automated count of the number of consecutive build failures or successes (replacing a flip chart we manually updated for a while).
</p><p>
The nag server worked rather well for a while--it improved the build success:failure ratio and increased the visibility of the continuous integration process both within the development team and among the "customer" team.  We often find developers gathered around the nag server discussing the current integration problem or checking to see if their changes made it into the current build.  Unfortunately, the nag server eventually became less effective as a motivational tool.  Additional measures seemed necessary.  More on that in a later post.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/29.html#a27" title="item permalink">posted&nbsp;7:32:15 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=27&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F29.html%23a27" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (27)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=27&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F29.html%23a27">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=27&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F29.html%23a27" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (27)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=27&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F29.html%23a27">(link)</a>
</div>
  <p></p>


< Monday, 28 April 2003 >

A Little Background on our Continuous Integration Setup <sup><a href="http://radio.weblogs.com/0122027/2003/04/28.html#a26" title="item permalink">#</a></sup>


<p>
I've been tinkering with a long post on some experiences with <a href="http://www.martinfowler.com/articles/continuousIntegration.html" title="Continuous Integration by Martin Fowler and Matthew Foemmel">continuous integration</a>, but since I'm having trouble finding the time to put it all together, I'll try splitting it up into multiple posts (as seems to be all the rage these days). At the very least this should help me get something posted.
</p><p>
Part 1, a little background.
</p><p>
At the shop where I work we've been running an increasingly continuous integration service for a little over two years.
Our first fully automated, detect-a-change, build-and-smoke-test occurred on 15 October 2001.  Prior to that we had been running a complete build-and-smoke test at least nightly for several months.
</p><p>
Through fits and starts, this CI process has grown to be pretty comprehensive. It performs a complete build-and-unit-test, and in limited circumstances, deploy-and-functional-test across nearly 100 modules (roughly 200,000 non-blank, non-comment lines of code) supporting various internal and external, server, web-based and desktop applications being developed full time by more than 20 developers.  The service is based upon a modified version of <a href="http://cruisecontrol.sf.net/" title="CruiseControl's SourceForge Page">CruiseControl</a> (1.2.1) driving a common <a href="http://ant.apache.org/" title="Apache Ant">Ant</a> build script, <a href="http://junit.org/" title="JUnit.org">JUnit</a> unit tests, <a href="http://jakarta.apache.org/commons/latka/" title="Apache's Jakarta Commons Latka">Latka</a> and <a href="http://jfcunit.sourceforge.net/" title="jfcUnit's SourceForge Page">jfcUnit</a> functional tests.  Build results are reported through email and on our intranet.  Clean builds are tagged, and the generated artifacts are placed in a repository that serves as the foundation for both production deployments and sandbox development.  (Curiously, we've found <a href="http://cvshome.org" title="CVS Home">CVS</a> to be one of the weakest links in that tool chain, but that's a topic for another day.)
</p><p>
It has its problems, but all in all, it's an admirable, perhaps even enviable, setup.  In later posts I hope to discuss some of those problems and some observations we've made along the way.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/28.html#a26" title="item permalink">posted&nbsp;1:24:05 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=26&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F28.html%23a26" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (26)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=26&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F28.html%23a26">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=26&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F28.html%23a26" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (26)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=26&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F28.html%23a26">(link)</a>
</div>
  <p></p>


< Wednesday, 23 April 2003 >

InfoWorld's "Farewell Issue" <sup><a href="http://radio.weblogs.com/0122027/2003/04/23.html#a25" title="item permalink">#</a></sup>


 <p>
I work for a company that at one time tried to position itself as a "dot com" and as a result I've seen a lot of friends and colleagues come and go over the years.  This inevitably results in a "farewell" email of one form or another.  For reasons both morbid and practical I archived many of these emails.  I named this mail folder "I quit", although it might more accurately be named "I've been laid off".  I find the variety of length, content, and tone fascinating.  Some are short but sincere: "It has been a privilege (and a blast) working with you, but I am moving on..."  Others are business-like and more than a little bitter: "As of [date] I will be resigning from my position as [title] of [department]."  Others strive to be poetic: "...and so castles made of sand, fall in the sea, eventually."  Others wax philosophical: "I imagine it was probably a dreich, sodden morning as two gentlemen nervously paced the stony, moss-covered steps..."
</p><p>
Going through my mail yesterday afternoon, I had a sensation while flipping through the April 18th edition of <a href="http://infoworld.com/" title="infoworld.com">InfoWorld</a> magazine similar to the one I have when looking through my "I quit" archive.  It seems that InfoWorld is changing formats a bit and has bid farewell to a number of its columnists.  I'm not a regular reader of InfoWorld, and probably couldn't identify any of its columnists by name, but <a href="http://infoworld.com/article/03/04/18/16survguide_1.html" title="Bob Lewis: Survival Guide: Parting thoughts">the</a>
<a href="http://infoworld.com/article/03/04/18/16storinside_1.html" title="Mario Apicella and Scott Tyler Shafer: Storage Insider: Rounding third, coming home">number</a>
<a href="http://infoworld.com/article/03/04/18/16gripe_1.html" title="Ed Foster: The Gripe Line: Unfinished business">of</a>
<a href="http://infoworld.com/article/03/04/18/16winman_1.html" title="Brian Livingston: Window Manager: Time for a change">farewell</a>
<a href="http://infoworld.com/article/03/04/18/16osource_1.html" title="Russell Pavlicek: The Open Source: The open road ahead">columns</a> is still a little sad, a little chilling, and strangely, morbidly fascinating nevertheless.  You can see <a href="http://infoworld.com/col_hom.html">an index of InfoWorld columns</a> on their site, but it looks like that probably changes from month to month.
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/23.html#a25" title="item permalink">posted&nbsp;11:56:53 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=25&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F23.html%23a25" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (25)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=25&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F23.html%23a25">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=25&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F23.html%23a25" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (25)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=25&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F23.html%23a25">(link)</a>
</div>
  <p></p>


< Tuesday, 22 April 2003 >

Are concrete parent classes a code smell? <sup><a href="http://radio.weblogs.com/0122027/2003/04/22.html#a24" title="item permalink">#</a></sup>


<p>
Recently I realized that I've almost subconsciously been following a design heuristic that even I found surprising--I avoid concrete parent classes.  Since coming to this realization, I've been struggling (and failing) to come up with a good case for an instantiable parent class.  Is there a case for classes that are neither abstract nor final?  Could concrete parent classes be a code smell?
</p><p>
<a href="http://radio.weblogs.com/0122027/stories/2003/04/21/areConcreteParentClassesACodeSmell.html" title="Are concrete parent classes a code smell?">full story...</a>
</p>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/22.html#a24" title="item permalink">posted&nbsp;6:55:17 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=24&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F22.html%23a24" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (24)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=24&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F22.html%23a24">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=24&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F22.html%23a24" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (24)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=24&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F22.html%23a24">(link)</a>
</div>
  <p></p>


< Wednesday, 16 April 2003 >

Ignore this post (Demonstrates javablogs bug?) <sup><a href="http://radio.weblogs.com/0122027/2003/04/16.html#a23" title="item permalink">#</a></sup>


I've been chasing after a minor <a href="http://javablogs.com/">javablogs</a> bug that causes blog entries that aren't in my java channel to appear on the javablogs site, despite the fact that the <a href="http://www.javablogs.com/ViewBlog.jspa?id=10656">javablogs record for this site</a> is pointing to my <a href="http://radio.weblogs.com/0122027/categories/java/rss.xml">java feed</a> not my <a href="http://radio.weblogs.com/0122027/rss.xml">general feed</a>.<p>

For example, <a href="http://www.javablogs.com/ViewDaysBlogs.jspa?date=15&amp;month=3&amp;year=2003">yesterdays added entries</a> include "Radio Tidbit: Waypath It! Macro" and "The Hundred Year Language (update on "Bruce Eckel has an interesting blog")", even though neither of them were published on <a href="http://radio.weblogs.com/0122027/2003/04/15.html">15 April 2003</a>, and neither of them are published on my <a href="http://radio.weblogs.com/0122027/categories/java/">java channel</a>.</p><p>

My theory is this:  javablogs is correctly tracking the java feed to determine when my blog has changed, but is pulling from the general feed to obtain new entries.  That's why entries that were several days old and unrelated to Java suddenly got pulled in to the javablogs aggregator (because a java related post, "I/O Iterators for Java" finally came along).</p><p>

My test is this.  This entry is only categorized under my main feed.  It will sit here quietly in the <a href="http://radio.weblogs.com/0122027/rss.xml">general feed</a> and not the <a href="http://radio.weblogs.com/0122027/categories/java/rss.xml">java feed</a>, and will not appear on the <a href="http://javablogs.com/">javablogs</a> site until I post a new entry under my Java category, when it will pull in both that new and this old entry.</p><p>

Ive noticed other folks posts sometimes bunch up in this way, I wonder if others have the same problem.</p><p>

I suspect the underlying cause for this is some minor bug in the javablogs record update process.  I had originally registered my general feed with javablogs, and later changed that record to only point to my java category.</p><p>

</p><div class="update">Update [16 April 2003]: I've just noticed that some others are <a href="http://dmartin.org/blojsom/blog/Java/?permalink=7390BBB3C66BBAA0C69BD42377883F1B.txt">complaining about the off topic content as well</a>.</div><p>

</p><div class="update">Update [22 April 2003]: This post appeared on javablogs on 18 April 2003 (two days after the initial posting).  I'm not sure why or how, but you can see it <a href="http://www.javablogs.com/ViewDaysBlogs.jspa?date=18&amp;month=3&amp;year=2003" title="JavaBlogs: Day's Blogs: 18 April 2003">here</a></div>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/16.html#a23" title="item permalink">posted&nbsp;6:50:59 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=23&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F16.html%23a23" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (23)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=23&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F16.html%23a23">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=23&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F16.html%23a23" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (23)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=23&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F16.html%23a23">(link)</a>
</div>
  <p></p>


< Tuesday, 15 April 2003 >

I/O Iterators for Java <sup><a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="item permalink">#</a></sup>


While fleshing out the remaining parts of the <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/" title="package org.apache.commons.collections.primitives">primitives</a> package in <a href="http://jakarta.apache.org/commons/" title="Apache's Jakarta Commons Collections">Commons Collections</a>, a simple but potentially powerful feature became apparent.  Using the byte-based primitive collections, it's not only easy but also efficient to bring together the I/O and Collections APIs via <a href="http://cvs.apache.org/viewcvs.cgi/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/adapters/io/" title="package org.apache.commons.collections.primitives.adapters.io">ByteIterator/InputStream adapters</a>. <p>

This allows one to treat any InputStream as a ByteIterator (and hence as an Iterator over Bytes)  without resorting to a byte array buffer.  This means that Iterator-based APIs like the <a href="http://jakarta.apache.org/commons/sandbox/functor/" title="Apache's Jakarta Commons Functor">functor</a> <a href="http://jakarta.apache.org/commons/sandbox/functor/apidocs/org/apache/commons/functor/core/collection/CollectionAlgorithms.html" title="CollectionAlgorithms">algorithms</a> can be applied to I/O streams.  Similarly, this allows one to treat any ByteCollection (or Collection of Bytes) as a source for InputStreams.  This means that stream-based APIs can be applied to ByteCollections and Collections of Bytes.</p><p>

This brings Java one small step closer to the conceptual uniformity and resulting combinatorial expressiveness enjoyed by languages like Lisp.  This is reason enough in my mind to extend the primitive collections to Char/char and to Reader-adapters as well.</p><p>

(Also see <a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="Rod's Open Source To Do List">this related post</a>.)</p><p>

</p><div class="update">Update: [17 April 2003] I've added char types to the primitives package, as well as CharIterator/Reader adapters.</div>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="item permalink">posted&nbsp;12:20:56 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=22&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F15.html%23a22" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (22)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=22&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F15.html%23a22">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=22&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F15.html%23a22" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (22)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=22&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F15.html%23a22">(link)</a>
</div>
  <p></p>


< Friday, 11 April 2003 >

Radio Tidbit: Waypath It! Macro <sup><a href="http://radio.weblogs.com/0122027/2003/04/11.html#a18" title="item permalink">#</a></sup>


  I started a little page that describes some of the tricks this neophyte Radio Userland user has learned.  I'm calling the first non-trivial one (although it's pretty close to trivial) <a href="http://radio.weblogs.com/0122027/stories/2003/04/11/radioTidbits.html#waypathit" title="Radio Tidbits: Waypath It">Waypath It</a>, and it generates links that search <a href="http://waypath.com/" title="waypath.com">waypath.com</a> for related blog entries, much like the <a href="http://radio.userland.com/googleItMacro" title="New feature: Google-It! Macro for Item Templates">Google It macro</a> does for Google.<p>

The full story is <a href="http://radio.weblogs.com/0122027/stories/2003/04/11/radioTidbits.html" title="Radio Tidbits">here</a>.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/11.html#a18" title="item permalink">posted&nbsp;11:20:50 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=18&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F11.html%23a18" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (18)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=18&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F11.html%23a18">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=18&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F11.html%23a18" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (18)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=18&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F11.html%23a18">(link)</a>
</div>
  <p></p>


< Wednesday, 9 April 2003 >

The Hundred Year Language (update on "Bruce Eckel has an interesting blog") <sup><a href="http://radio.weblogs.com/0122027/2003/04/09.html#a17" title="item permalink">#</a></sup>


John Wiseman <a href="http://lemonodor.com/archives/000390.html" title="Lemonodor: April 09, 2003: The Hundred Year Language">points out</a> that Paul Graham has written up a version of his PyCon keynote address on
<a href="http://www.paulgraham.com/hundred.html">"The Hundred Year Language"</a>.  <p>

This is the address that was summarized in <a href="http://mindview.net/WebLog">Bruce Eckel's weblog</a>, as I <a href="http://radio.weblogs.com/0122027/2003/04/03.html#a9" title="Rod Waldhoff's Weblog: April 03, 2003: Bruce Eckel has an interesting blog">previously mentioned</a>.</p><p>

I'd pull quotes, but it's really an good read all the way through if you're at all interested in language design or evolution. (And nearly any program design really is language design.)</p><p>

[via <a href="http://lemonodor.com/">lemonodor</a>]
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/09.html#a17" title="item permalink">posted&nbsp;5:34:56 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=17&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F09.html%23a17" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (17)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=17&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F09.html%23a17">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=17&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F09.html%23a17" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (17)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=17&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F09.html%23a17">(link)</a>
</div>
  <p></p>


< Tuesday, 8 April 2003 >

Jason Horman's WikiDoclet <sup><a href="http://radio.weblogs.com/0122027/2003/04/08.html#a15" title="item permalink">#</a></sup>


  Found a link to <a href="http://www.jhorman.org/wikidoclet" title="WikiDoclet: wiki formatting for javadoc">WikiDoclet</a> <a href="http://www.thauvin.net/blog/news.jsp?date=2003-04-08#733" title="Erik's Weblog: 2003-04-08: #733">on</a> <a href="http://www.thauvin.net/blog/" title="thauvin.net/blog/">Erik Thauvin's weblog</a>.  This is a custom doclet that allows one to write JavaDoc comments with <a href="http://twiki.org/" title="twiki.org">TWiki</a>-style markup rather than HTML markup.  For example, one could write:
<pre>/**
 * First Para.
 *
 * Second Para.
 *    * bullet one
 *       * _sub_ bullet
 *    * bullet two
 */</pre>
instead of:
<pre>/**
 * First Para.
 * &lt;p /&gt;
 * Second Para.
 * &lt;ul&gt;
 *   &lt;li&gt;
 *    bullet one
 *    &lt;ul&gt;
 *     &lt;li&gt;&lt;i&gt;sub&lt;/i&gt; bullet&lt;/li&gt;
 *    &lt;/ul&gt;
 *   &lt;/li&gt;
 *   &lt;li&gt;bullet two&lt;/li&gt;
 * &lt;/ul&gt;
 */</pre><p>

Neat, huh?  Wish I'd thought of that.</p><p>

I haven't tried it yet, but it seems like a really useful tool for those who find that HTML formatting within JavaDoc comments interrupts the <a href="http://c2.com/cgi/wiki?MentalStateCalledFlow" title="Mental State Called Flow">flow</a> of coding.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/08.html#a15" title="item permalink">posted&nbsp;1:07:57 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (15)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (15)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15">(link)</a>
</div>
  <p></p>


< Tuesday, 8 April 2003 >

Jason Horman's WikiDoclet <sup><a href="http://radio.weblogs.com/0122027/2003/04/08.html#a15" title="item permalink">#</a></sup>


  Found a link to <a href="http://www.jhorman.org/wikidoclet" title="WikiDoclet: wiki formatting for javadoc">WikiDoclet</a> <a href="http://www.thauvin.net/blog/news.jsp?date=2003-04-08#733" title="Erik's Weblog: 2003-04-08: #733">on</a> <a href="http://www.thauvin.net/blog/" title="thauvin.net/blog/">Erik Thauvin's weblog</a>.  This is a custom doclet that allows one to write JavaDoc comments with <a href="http://twiki.org/" title="twiki.org">TWiki</a>-style markup rather than HTML markup.  For example, one could write:
<pre>/**
 * First Para.
 *
 * Second Para.
 *    * bullet one
 *       * _sub_ bullet
 *    * bullet two
 */</pre>
instead of:
<pre>/**
 * First Para.
 * &lt;p /&gt;
 * Second Para.
 * &lt;ul&gt;
 *   &lt;li&gt;
 *    bullet one
 *    &lt;ul&gt;
 *     &lt;li&gt;&lt;i&gt;sub&lt;/i&gt; bullet&lt;/li&gt;
 *    &lt;/ul&gt;
 *   &lt;/li&gt;
 *   &lt;li&gt;bullet two&lt;/li&gt;
 * &lt;/ul&gt;
 */</pre><p>

Neat, huh?  Wish I'd thought of that.</p><p>

I haven't tried it yet, but it seems like a really useful tool for those who find that HTML formatting within JavaDoc comments interrupts the <a href="http://c2.com/cgi/wiki?MentalStateCalledFlow" title="Mental State Called Flow">flow</a> of coding.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/08.html#a15" title="item permalink">posted&nbsp;1:07:57 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (15)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (15)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=15&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F08.html%23a15">(link)</a>
</div>
  <p></p>


================================================================================

< Monday, 7 April 2003 >

Rod's Open Source To Do List <sup><a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="item permalink">#</a></sup>


  My open source contributions have been a bit scattershot recently. I do have some overarching goals here, they just happen to touch on a number of independent projects.  By way of self-imposed public shaming, here's some open source related tasks I've been meaning to take care of.  (These are listed in no particular order, I'll leave it to the reader to sort out the dependencies.)<p>

</p><ul>
 <li><b><a href="http://jakarta.apache.org/commons/collections/" title="Apache's Jakarta-Commons Collections">Jakarta-Commons Collections</a>:</b> Complete migration of the <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/" title="org.apache.commons.collections.primitives">primitives package</a> to the new purely primitive interfaces with <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/adapters/" title="org.apache.commons.collections.primitives.adapters">Collection adapters</a>.  Move toward a 3.0 release.</li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/functor/" title="Apache's Jakarta-Commons Functor">Jakarta-Commons Functor</a>:</b> Repackage the various org.apache.commons.functor.core.* subpackages to org.apache.commons.functor.*.  I had initially expected a tighter dependency between core.<subpackage> and core, in practice there are no dependencies.</subpackage></li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/functor/" title="Apache's Jakarta-Commons Functor">Jakarta-Commons Functor</a>:</b> Normalize the names of the methods used to obtain the static instances of the stateless functors.  Probably something as uninspired as getInstance.</li>
 <li><b><a href="http://axion.tigris.org/" title="Axion: Java RDBMS">Axion</a>:</b> Update Axion to use the new primitive collections interfaces instead of the old.</li>
 <li><b><a href="http://axion.tigris.org/" title="Axion: Java RDBMS">Axion</a>:</b> Add Axion to <a href="http://jakarta.apache.org/gump/" title="Gump: a large scale continuous integration tool">Gump</a>, now that Axion builds with JDK 1.4.</li>
 <li><b><a href="http://jakarta.apache.org/commons/pool/" title="Apache's Jakarta-Commons Pool">Jakarta-Commons Pool</a>:</b> Introduce functor-based interfaces and implementations for <a href="http://jakarta.apache.org/commons/sandbox/functor/examples.html#Reuse%20Through%20Composition" title="Jakarta-Commons Functor Examples">specialization through composition</a>.</li>
 <li><b><a href="http://jakarta.apache.org/commons/dbcp/" title="Apache's Jakarta-Commons DBCP">Jakarta-Commons DBCP</a>/<a href="http://db.apache.org/commons/" title="Apache's DB-Commons">DB-Commons</a>:</b> Extract JDBC-proxy types from DBCP, use it and the functored <a href="http://jakarta.apache.org/commons/pool/" title="Apache's Jakarta-Commons Pool">pool</a> implementations to clean up DBCP. In particular, use composition to support the folks who want features like "abandoned" object detection and the like.</li>
 <li><b><a href="http://jakarta.apache.org/commons/dbcp/" title="Apache's Jakarta-Commons DBCP">Jakarta-Commons DBCP</a>:</b> Use Axion to implement more complete/robust unit tests for DBCP.</li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/jux/" title="Apache's Jakarta-Commons JUX">Jakarta-Commons JUX</a>:</b> The trivially simple JUX (JUnit eXtensions) package may be helpful for some of the above, as might the "tunneled exception" stuff I <a href="http://radio.weblogs.com/0122027/2003/04/01.html#a7" title="Java's checked exceptions were a mistake (and here's what I would like to do about it)">previously mentioned</a>.</li>
</ul><p>

I've got some other tasks in mind of course, but these are the ones that have been floating around for a while.  We'll see if this helps act as a motivator, it should at least be useful for my own reference.</p><p>

<a href="http://radio.weblogs.com/0116794/" title="Weblog: Morgan Delagrange">Morgan</a> posted a similiar list a while back (a blog entry that was <a href="http://radio.weblogs.com/0116794/2003/03/06.html#a1" title="Weblog: Morgan Delagrange: Welcome back, Weblog">lost</a> it seems). I'm not sure he found it helpful, but I like the idea of having some modern equivalent of .plan files.</p><p>

</p><div class="update">Update: [13 April 2003] I've added unsigned byte, short, unsigned int, long, and float types (and tests of course) to commons-collections over the past few days.  I suppose I should add byte and double types for completeness, even though it's counter to the "you aren't gonna need it" spirit.  I.e., I've used all the others, but for whatever reason have never encountered a need for ByteList or DoubleList.</div><p>

</p><div class="update">Update: [15 April 2003] I've added byte and double types to the primitives package.  I've also discovered <a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="I/O Iterators for Java">an interesting artifact of this approach</a> which makes me want to add char based types as well.</div><p>

</p><div class="update">Update: [17 April 2003] I've added char types to the primitives package, as well as CharIterator/Reader adapters.  I think I can finally call that first bullet code complete.</div>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="item permalink">posted&nbsp;1:53:50 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (13)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (13)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13">(link)</a>
</div>
  <p></p>


< Monday, 7 April 2003 >

Rod's Open Source To Do List <sup><a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="item permalink">#</a></sup>


  My open source contributions have been a bit scattershot recently. I do have some overarching goals here, they just happen to touch on a number of independent projects.  By way of self-imposed public shaming, here's some open source related tasks I've been meaning to take care of.  (These are listed in no particular order, I'll leave it to the reader to sort out the dependencies.)<p>

</p><ul>
 <li><b><a href="http://jakarta.apache.org/commons/collections/" title="Apache's Jakarta-Commons Collections">Jakarta-Commons Collections</a>:</b> Complete migration of the <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/" title="org.apache.commons.collections.primitives">primitives package</a> to the new purely primitive interfaces with <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/adapters/" title="org.apache.commons.collections.primitives.adapters">Collection adapters</a>.  Move toward a 3.0 release.</li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/functor/" title="Apache's Jakarta-Commons Functor">Jakarta-Commons Functor</a>:</b> Repackage the various org.apache.commons.functor.core.* subpackages to org.apache.commons.functor.*.  I had initially expected a tighter dependency between core.<subpackage> and core, in practice there are no dependencies.</subpackage></li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/functor/" title="Apache's Jakarta-Commons Functor">Jakarta-Commons Functor</a>:</b> Normalize the names of the methods used to obtain the static instances of the stateless functors.  Probably something as uninspired as getInstance.</li>
 <li><b><a href="http://axion.tigris.org/" title="Axion: Java RDBMS">Axion</a>:</b> Update Axion to use the new primitive collections interfaces instead of the old.</li>
 <li><b><a href="http://axion.tigris.org/" title="Axion: Java RDBMS">Axion</a>:</b> Add Axion to <a href="http://jakarta.apache.org/gump/" title="Gump: a large scale continuous integration tool">Gump</a>, now that Axion builds with JDK 1.4.</li>
 <li><b><a href="http://jakarta.apache.org/commons/pool/" title="Apache's Jakarta-Commons Pool">Jakarta-Commons Pool</a>:</b> Introduce functor-based interfaces and implementations for <a href="http://jakarta.apache.org/commons/sandbox/functor/examples.html#Reuse%20Through%20Composition" title="Jakarta-Commons Functor Examples">specialization through composition</a>.</li>
 <li><b><a href="http://jakarta.apache.org/commons/dbcp/" title="Apache's Jakarta-Commons DBCP">Jakarta-Commons DBCP</a>/<a href="http://db.apache.org/commons/" title="Apache's DB-Commons">DB-Commons</a>:</b> Extract JDBC-proxy types from DBCP, use it and the functored <a href="http://jakarta.apache.org/commons/pool/" title="Apache's Jakarta-Commons Pool">pool</a> implementations to clean up DBCP. In particular, use composition to support the folks who want features like "abandoned" object detection and the like.</li>
 <li><b><a href="http://jakarta.apache.org/commons/dbcp/" title="Apache's Jakarta-Commons DBCP">Jakarta-Commons DBCP</a>:</b> Use Axion to implement more complete/robust unit tests for DBCP.</li>
 <li><b><a href="http://jakarta.apache.org/commons/sandbox/jux/" title="Apache's Jakarta-Commons JUX">Jakarta-Commons JUX</a>:</b> The trivially simple JUX (JUnit eXtensions) package may be helpful for some of the above, as might the "tunneled exception" stuff I <a href="http://radio.weblogs.com/0122027/2003/04/01.html#a7" title="Java's checked exceptions were a mistake (and here's what I would like to do about it)">previously mentioned</a>.</li>
</ul><p>

I've got some other tasks in mind of course, but these are the ones that have been floating around for a while.  We'll see if this helps act as a motivator, it should at least be useful for my own reference.</p><p>

<a href="http://radio.weblogs.com/0116794/" title="Weblog: Morgan Delagrange">Morgan</a> posted a similiar list a while back (a blog entry that was <a href="http://radio.weblogs.com/0116794/2003/03/06.html#a1" title="Weblog: Morgan Delagrange: Welcome back, Weblog">lost</a> it seems). I'm not sure he found it helpful, but I like the idea of having some modern equivalent of .plan files.</p><p>

</p><div class="update">Update: [13 April 2003] I've added unsigned byte, short, unsigned int, long, and float types (and tests of course) to commons-collections over the past few days.  I suppose I should add byte and double types for completeness, even though it's counter to the "you aren't gonna need it" spirit.  I.e., I've used all the others, but for whatever reason have never encountered a need for ByteList or DoubleList.</div><p>

</p><div class="update">Update: [15 April 2003] I've added byte and double types to the primitives package.  I've also discovered <a href="http://radio.weblogs.com/0122027/2003/04/15.html#a22" title="I/O Iterators for Java">an interesting artifact of this approach</a> which makes me want to add char based types as well.</div><p>

</p><div class="update">Update: [17 April 2003] I've added char types to the primitives package, as well as CharIterator/Reader adapters.  I think I can finally call that first bullet code complete.</div>
  <div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/07.html#a13" title="item permalink">posted&nbsp;1:53:50 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (13)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (13)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=13&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F07.html%23a13">(link)</a>
</div>
  <p></p>


< Saturday, 5 April 2003 >

Eclipse: The Power of the Platform <sup><a href="http://radio.weblogs.com/0122027/2003/04/05.html#a11" title="item permalink">#</a></sup>


  Ted Leung <a href="http://www.sauria.com/blog/2003/04/05#124" title="Languages that support community">writes</a> that "it may turn out that Eclipse is what locks me in to Java".  Carlos Perez <a href="http://www.freeroller.net/page/ceperez/20030405#why_eclipse_demolishes_other_alternative" title="Why Eclipse Demolishes other Alternative Languages">writes</a> that "Eclipse demolishes other alternative languages" because "it doesn't matter how nice the syntax of your language is, its just simply not going to be as productive an environment as what you find in the Java world [with refactoring browsers like Eclipse and IDEA]".<p>

Of course, Java's not the <a href="http://www.refactoring.com/tools.html" title="Refactory, a Refactoring Browser for Smalltalk">first</a> or <a href="http://bicyclerepair.sourceforge.net/" title="Bicycle Repair Man, a Refactoring Browser for Python">only</a> language with a refactoring tool, indeed there's <a href="http://www.refactoring.com/tools.html" title="Refactoring Tools">a long list of refactoring browsers</a> available on Fowler's site. And <a href="http://eclipse-plugins.2y.net/eclipse/plugins.jsp?category=Languages" title="Eclipse language plugins">Eclipse supports much more than Java</a>.  Nevertheless, now that mature refactoring tools are available for Java, the speed and degree to which they've caught on (perhaps even dominate?) is pleasantly surprising.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/05.html#a11" title="item permalink">posted&nbsp;2:08:34 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=11&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F05.html%23a11" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (11)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=11&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F05.html%23a11">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=11&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F05.html%23a11" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (11)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=11&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F05.html%23a11">(link)</a>
</div>
  <p></p>


< Thursday, 3 April 2003 >

Fixing checked exceptions with generics? <sup><a href="http://radio.weblogs.com/0122027/2003/04/03.html#a10" title="item permalink">#</a></sup>


  <a href="http://madbean.com/blog/" title="madbean.com">Matt Quail</a> <a href="http://madbean.com/blog/15/" title="re: Java's checked exceptions were a mistake">proposes</a> an interesting <a href="http://jcp.org/jsr/detail/14.jsp" title="JSR 14">generics</a>-based solution to my <a href="http://radio.weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html" title="Java's checked exceptions were a mistake (and here's what I would like to do about it)">issues with checked exceptions</a> in Java.<p>

It's been a long time since I used templates (in C++), and I haven't looked at the <a href="http://jcp.org/aboutJava/communityprocess/review/jsr014/index.html">public review draft of JSR 14</a> in any detail, but it seems like something along those lines might work.</p><p>

Someone calling himself <a href="http://www.freeroller.net/page/javabear/">JavaBear</a> also had some <a href="http://www.freeroller.net/page/javabear/20030402#exception_handling_taking_back_one" title="Exception Handling, Taking Back One of My Cents">kind comments</a> regarding this post.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/03.html#a10" title="item permalink">posted&nbsp;7:02:25 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (10)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (10)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10">(link)</a>
</div>
  <p></p>


< Thursday, 3 April 2003 >

Fixing checked exceptions with generics? <sup><a href="http://radio.weblogs.com/0122027/2003/04/03.html#a10" title="item permalink">#</a></sup>


  <a href="http://madbean.com/blog/" title="madbean.com">Matt Quail</a> <a href="http://madbean.com/blog/15/" title="re: Java's checked exceptions were a mistake">proposes</a> an interesting <a href="http://jcp.org/jsr/detail/14.jsp" title="JSR 14">generics</a>-based solution to my <a href="http://radio.weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html" title="Java's checked exceptions were a mistake (and here's what I would like to do about it)">issues with checked exceptions</a> in Java.<p>

It's been a long time since I used templates (in C++), and I haven't looked at the <a href="http://jcp.org/aboutJava/communityprocess/review/jsr014/index.html">public review draft of JSR 14</a> in any detail, but it seems like something along those lines might work.</p><p>

Someone calling himself <a href="http://www.freeroller.net/page/javabear/">JavaBear</a> also had some <a href="http://www.freeroller.net/page/javabear/20030402#exception_handling_taking_back_one" title="Exception Handling, Taking Back One of My Cents">kind comments</a> regarding this post.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/03.html#a10" title="item permalink">posted&nbsp;7:02:25 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (10)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (10)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=10&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F03.html%23a10">(link)</a>
</div>
  <p></p>


< Wednesday, 2 April 2003 >

Some Planned JDK 1.5 Features <sup><a href="http://radio.weblogs.com/0122027/2003/04/02.html#a8" title="item permalink">#</a></sup>


  On <a href="http://www.c2.com/cgi/wiki">Ward's Wiki</a>, I stumbled across a link to <a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/enhanced-for.html">"An enhanced for loop for the Java Programming Language"</a> which is part of <a href="http://jcp.org/en/jsr/detail?id=176">JSR 176: J2SE 1.5 (Tiger) Release Contents</a>.  It seems this will allow one to write:
<pre>for(String str : myCollection) {
  System.out.println(str);
}</pre>
as syntactic sugar for:
<pre>for(Iterator iter = c.iterator(); iter.hasNext(); ) {
  System.out.println((String)(iter.next()));
}</pre><p>

In addition, the document describes some changes to Java Iterators to support this.</p><p>

This in and of itself is neat.  Some <a href="http://www.uwec.edu/jerzdg/orr/handouts/TW/web/url-hacking.htm">URL hacking</a> on that link leads to <a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/">a list of files</a> documenting some other interesting features, including:</p><p>

</p><ul>
<li><a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/autoboxing.html">Autoboxing Support</a> - automated conversion from primitives to primitive wrappers</li>
<li><a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/enum.html">A Typesafe enum Facility</a> - <code>public enum Suit { clubs, diamonds, hearts, spades }</code></li>
<li><a href="http://jcp.org/aboutJava/communityprocess/jsr/tiger/static-import.html">Importing Static Members</a> - where <code>import java.util.Math.*</code> will expose <code>Math.abs(x)</code> as simply <code>abs(x)</code>.</li>
</ul><p>

It's strange that Java's "Community" Process doesn't expose this sort of detail more publicly. I'm unable to find a link to these documents on either of <a href="http://jcp.org/">jcp.org</a> or <a href="http://java.sun.com/">java.sun.com</a>.</p><p>

<a href="http://www.google.com/search?q=jdk+1.5">Googling on "JDK 1.5"</a> yields some hits, including <a href="http://weblogs.flamefew.net/bayard/archives/000018.html">an entry from Henri's blog</a> and <a href="http://www.brunningonline.net/simon/blog/archives/000611.html">several</a> <a href="http://www.dynamicobjects.com/d2r/archives/2003_02_07.html">others</a>, <a href="http://java.sun.com/features/2002/03/totiger.html">a brief article from java.sun.com</a>, even <a href="http://developers.slashdot.org/article.pl?sid=03/02/06/0038250">an article on slashdot</a>, all dated at least a month ago, so maybe this is old news to many of you.</p><p>

(<a href="http://jcp.org/en/jsr/detail?id=14">JSR 14</a> adding C++ template style <a href="http://developer.java.sun.com/developer/technicalArticles/releases/generics/">generics</a> to Java is another major change planned for JDK 1.5 it seems, but that one's been pretty widely known.  I wonder if generics together with autoboxing will allow me to replace the <a href="http://cvs.apache.org/viewcvs/jakarta-commons/collections/src/java/org/apache/commons/collections/primitives/">org.apache.commons.collections.primitives</a> package?)
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/02.html#a8" title="item permalink">posted&nbsp;10:40:12 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=8&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F02.html%23a8" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (8)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=8&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F02.html%23a8">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=8&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F02.html%23a8" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (8)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=8&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F02.html%23a8">(link)</a>
</div>
  <p></p>


< Tuesday, 1 April 2003 >

Java's checked exceptions were a mistake (and here's what I would like to do about it) <sup><a href="http://radio.weblogs.com/0122027/2003/04/01.html#a7" title="item permalink">#</a></sup>


  Java's checked exceptions were an experiment. While Java borrows most of its try/catch exception handling from C++, the notion of "checked" exceptions, which must either be caught or explicitly thrown, are a Java addition. By and large, this experiment has failed. You won't find checked exceptions in Java-influenced languages like Ruby or C#.<p>

<a href="http://radio.weblogs.com/0122027/stories/2003/04/01/JavasCheckedExceptionsWereAMistake.html">full story...</a></p><p>

(I had intended this to be a simple blog post, but it turned out to be too long for that.  At least this gives me a chance to try out radio's "story" feature.)
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/04/01.html#a7" title="item permalink">posted&nbsp;5:14:03 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=7&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F01.html%23a7" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (7)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=7&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F01.html%23a7">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=7&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F01.html%23a7" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (7)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=7&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F04%2F01.html%23a7">(link)</a>
</div>
  <p></p>


< Monday, 31 March 2003 >

Literate Programming with JUnit <sup><a href="http://radio.weblogs.com/0122027/2003/03/31.html#a6" title="item permalink">#</a></sup>


  I've long been a fan of telling folks "if you want examples, take a look at the unit tests". Folks have long been disappointed with that response.<p>

I've found maintaining a distinct "examples" tree problematic, for a number of reasons but fundamentally due to my own laziness.  One set of forces pulls us toward maintaining the examples as documentation--we want the examples linked in to the other documentation and to include explanatory prose.  Another set of forces pulls us toward maintaining the examples as source code--we want to make sure the examples will compile, are up-to-date with the rest of the API, and can be refactored with the rest of the codebase (so that, for example, a "Rename Method" refactoring applies to the examples as well as everything else).</p><p>

Recently I've been experimenting with what seems to be a viable approach to this problem--writing examples as "<a href="http://www.c2.com/cgi/wiki?LiterateProgramming">literate</a>" unit tests.  In short, I keep the examples directly within the test source tree, implementing them as true <a href="http://junit.org/">JUnit</a> <code>TestCase</code>s, and using plain old C-style (not JavaDoc) comments to provide the prose.  The JXR Java-to-HTML cross-reference generating tool can produce a hyper-linked version of those source files, and it's already built into <a href="http://maven.apache.org">Maven</a>'s <code>site</code> goal.  </p><p>

You can see <a href="http://jakarta.apache.org/commons/sandbox/functor/examples.html">some examples</a> of this approach within <a href="http://jakarta.apache.org/commons/sandbox/functor/">Commons Functor</a>.</p><p>

(<a href="http://www.literateprogramming.com/">Literate Programming purists</a> are likely to take issue with calling this "literate programming", but there don't seem to be many of those around these days.)</p><p>

I've found this approach leads me to create a lot more inner classes in those unit tests than in my typical code. The heavy use of inner classes may be disorienting for some readers, but I suppose it isn't strictly necessary (the alternative may be to "pollute" the test tree with more files).  On the positive side, this approach does a good job of allowing one to express the code in a "<a href="http://www.junit.org/news/article/test_first/">test first</a>" style without resorting to showing the code as a time-series.  If I can find the time I'll probably be adding some more Commons Functor examples in the next few days, so if you're interested you may want to check back then too.</p><p>

It might be interesting to try to find or build greater tool support for this approach, perhaps with some custom JavaDoc doclet or java2html tool. (I keep wanting to move beyond simple text in those descriptions, although the simplicity has its appeal.)</p><p>

(I'm very interested in what others think about this approach, by the way.  Feel free to comment or otherwise contact me.)
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/03/31.html#a6" title="item permalink">posted&nbsp;1:25:48 PM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=6&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F31.html%23a6" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (6)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=6&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F31.html%23a6">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=6&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F31.html%23a6" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (6)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=6&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F31.html%23a6">(link)</a>
</div>
  <p></p>


< Saturday, 29 March 2003 >

Axion 1.0 Milestone 1 Released <sup><a href="http://radio.weblogs.com/0122027/2003/03/29.html#a4" title="item permalink">#</a></sup>


  It's been a long time coming (Milestone 0 was released around 9 months ago), but we've finally got around to cutting <a href="http://axion.tigris.org/releases/1.0M1/">a second binary release</a> of <a href="http://axion.tigris.org/index.html">Axion</a>, the open source relational database system written in Java.<p>

This release adds <a href="http://axion.tigris.org/releases/1.0M1/release-notes.html">a bunch of neat features</a> including TRANSACTION_SERIALIZABLE strength transactions, a new btree index type, new data types and more.  </p><p>

The bulk of the work on these features was done <a href="http://axion.tigris.org/servlets/SummarizeList?listName=cvs">in the latter part of 2002</a>, but it's a little too easy for the development team to simply work from the cvs HEAD rather than preparing a binary release.  </p><p>

With a Milestone 1 release out of the way, we can move on to <a href="http://axion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=440">adding new features</a> a bit more aggressively, <a href="http://axion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=447">some</a> of <a href="http://axion.tigris.org/servlets/ReadMsg?list=dev&amp;msgNo=451">which</a> are already underway.  I hope to have more frequent milestone releases in the future, and I think the rest of the team does as well.  Indeed, <a href="http://axion.tigris.org/releases/1.0M2/">an M2 release</a> might be appropriate fairly soon.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/03/29.html#a4" title="item permalink">posted&nbsp;9:29:56 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=4&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F29.html%23a4" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (4)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=4&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F29.html%23a4">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=4&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F29.html%23a4" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (4)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=4&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F29.html%23a4">(link)</a>
</div>
  <p></p>


< Friday, 28 March 2003 >

First Post <sup><a href="http://radio.weblogs.com/0122027/2003/03/28.html#a3" title="item permalink">#</a></sup>


  I've finally started blogging. Why? Take your pick:<p>

</p><ul type="A">
<li>I've grown tired of pontificating on our intranet Wiki.</li>
<li>I've recently taken an interest in journaling in general.</li>
<li>A friend has been prodding me, at first privately and recently publicly to jump on the blogging bandwagon. (To protect the innocent I won't name him here.)</li>
<li>Having lurked for a couple of months on various blogs, I've decided to join the conversation.</li>
</ul>
Hopefully sometimes I'll have something interesting to say.<p>

I'm still getting used to the <a href="http://radio.userland.com/">Radio</a> style and formatting rules, so please excuse any bouts of repeated editing you see here.
  </p><div class="itemFooter"><a href="http://radio.weblogs.com/0122027/2003/03/28.html#a3" title="item permalink">posted&nbsp;10:41:37 AM</a>&nbsp;&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=3&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F28.html%23a3" onclick="window.open (this.href, 'comments', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" title="Click here to comment on this post." class="commentLink">comment&nbsp;[<script type="text/javascript" language="JavaScript">commentCounter (3)</script>]</a>&nbsp;<a href="http://radiocomments2.userland.com/comments?u=122027&amp;p=3&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F28.html%23a3">(link)</a>&nbsp;&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=3&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F28.html%23a3" onclick="window.open (this.href, 'TrackBacks', 'width=515, height=480, location=0, resizable=1, scrollbars=1, status=0, toolbar=0, directories=0'); return(false);" class="commentLink">trackback&nbsp;[<script type="text/javascript" language="JavaScript">trackbackCounter (3)</script>]</a>&nbsp;<a href="http://radiocomments.userland.com/comments$trackback?u=122027&amp;p=3&amp;link=http%3A%2F%2Fradio.weblogs.com%2F0122027%2F2003%2F03%2F28.html%23a3">(link)</a>
</div>
  <p></p>




All Posts
